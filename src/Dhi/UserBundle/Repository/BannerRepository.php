<?php

namespace Dhi\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BannerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BannerRepository extends EntityRepository
{

	 public function getBannerGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper) {

        $data = $this->trim_serach_data($searchData, $SearchType);

        $query = $this->createQueryBuilder('b')
                ->select('b')
                ->leftJoin('b.country', 'c')
                ->orderBy('b.id', 'desc');


        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {

            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);

        $countData = count($query->getQuery()->getArrayResult());

        $query->setMaxResults($limit);
        $query->setFirstResult($offset);

        $result = $query->getQuery()->getResult();

        $dataResult = array();

        if ($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }

    public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {

                     if ($key == 'Country' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'c.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    $i++;
                }
            } else {

            }
        }
        return $QueryStr;
    }

	public function checkExistOrderNo($country,$orderNo){

		$query = $this->createQueryBuilder('b')
                ->select('b')
                ->leftJoin('b.country', 'c')
				->where('c.id =:cid')
				->setParameter('cid', $country)
				->andWhere('b.orderNo =:orderNo')
				->setParameter('orderNo', $orderNo)
                ->orderBy('b.id', 'desc');

		$result = $query->getQuery()->getArrayResult();

		if(count($result) == 0){
			return 0 ;
		} else {
			return 1;
		}	
	}

	public function getOrderByData($country,$orderNo) {

		$query = $this->createQueryBuilder('b')
                ->select('b')
                ->leftJoin('b.country', 'c')
				->where('c.id =:cid')
				->setParameter('cid', $country)
				->andWhere('b.orderNo >=:orderNo')
				->setParameter('orderNo', $orderNo)
                 ->orderBy('b.orderNo', 'asc');

		$result = $query->getQuery()->getArrayResult();

		return $result;
	}

	public function getDeleteOrderByData($country,$orderNo) {

		$query = $this->createQueryBuilder('b')
                ->select('b')
                ->leftJoin('b.country', 'c')
				->where('c.id =:cid')
				->setParameter('cid', $country)
				->andWhere('b.orderNo >:orderNo')
				->setParameter('orderNo', $orderNo)
                 ->orderBy('b.orderNo', 'asc');

		$result = $query->getQuery()->getArrayResult();

		return $result;
	}

	public function  getNextOrderData($country,$orderNo) {

		$query = $this->createQueryBuilder('b')
                ->select('b')
                ->leftJoin('b.country', 'c')
				->where('c.id =:cid')
				->setParameter('cid', $country)
				->andWhere('b.orderNo =:orderNo')
				->setParameter('orderNo', $orderNo)
                ->orderBy('b.orderNo', 'asc');

		$result = $query->getQuery()->getResult();

		if($result){
			return 1 ;
		} else {
			return 2 ;
		}

	}

	public function getOrderNo($country,$id){

		$order = array(1=> 1,2=>2,3=>3,4=>4,5=>5,6=>6,7=>7,8=>8,9=>9);

		$query = $this->createQueryBuilder('b')
                ->select('b')
                ->leftJoin('b.country', 'c')
				->where('c.id =:cid')
				->setParameter('cid', $country)
                ->orderBy('b.orderNo', 'asc');

		$result = $query->getQuery()->getArrayResult();

		$newOrderArray = array();
		$countOrder =  count($result);

		if($id){
			foreach($order as $key => $value){
				if($key <= $countOrder) {
					$newOrderArray[$key] = $value;
				}
			}
		} else {
			foreach($order as $key => $value){
				if($key <= $countOrder+1) {
					$newOrderArray[$key] = $value;
				}
			}
		}

		return $newOrderArray;
	}
	public function getNoOfOrder($country){

		$order = array(1=> 1,2=>2,3=>3,4=>4,5=>5,6=>6,7=>7,8=>8,9=>9);

		$query = $this->createQueryBuilder('b')
                ->select('b')
                ->leftJoin('b.country', 'c')
				->where('c.id =:cid')
				->setParameter('cid', $country)
                ->orderBy('b.orderNo', 'asc');

		$result = $query->getQuery()->getArrayResult();

		
		$countOrder =  count($result);

		

		return $countOrder;
	}
	
	public function getByOldOrderData($country,$orderNo){

		$query = $this->createQueryBuilder('b')
                ->select('b')
                ->leftJoin('b.country', 'c')
				->where('c.id =:cid')
				->setParameter('cid', $country)
				->andWhere('b.orderNo =:orderNo')
				->setParameter('orderNo', $orderNo)
                ->orderBy('b.orderNo', 'asc');

		$result = $query->getQuery()->getResult();
		

		return $result;

	}

}
