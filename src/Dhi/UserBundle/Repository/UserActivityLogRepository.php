<?php

namespace Dhi\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use \DateTime;

/**
 * UserActivityLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserActivityLogRepository extends EntityRepository {

    
    public function getActivityLogGridList($limit = 0, $offset = 10, $order_by = "id", $sort_order = "asc", $searchData, $SearchType, $objHelper, $user, $username = '') {

        $data = $this->trim_serach_data($searchData, $SearchType);
        
        $query = $this->createQueryBuilder('al')
                ->select('al.id, al.user, al.admin, al.activity, al.description, al.ip, al.timestamp, wl.companyName')
                ->leftJoin('DhiAdminBundle:WhiteLabel','wl','with','al.whiteLabelId = wl.id');
        
        if($username != ''){
            $query->andWhere('al.user = :user')
                ->setParameter('user', $username);
        }
        if ($SearchType == 'ORLIKE') {
            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {
            $likeStr = $objHelper->andLikeSearch($data);
        }
        
        if ($likeStr) {
            $query->andWhere($likeStr);
        }
        
        
        if(!empty($searchData) && isset($searchData['Date Time']))
        {
                
                $RequestDate = explode('~', $searchData['Date Time']);
    		$ReqFrom = trim($RequestDate[0]);
    		$ReqTo = trim($RequestDate[1]);
                
                if($ReqFrom != "")
                {    
                    $startDate = new \DateTime($ReqFrom);
                    $query->andWhere('al.timestamp >= :startdatetime');
                    $query->setParameter('startdatetime', $startDate->format('Y-m-d 00:00:00'));
                }
                if($ReqTo != "") {
                    $endDate = new \DateTime($ReqTo);
                    $query->andWhere('al.timestamp <= :enddatetime');
                    $query->setParameter('enddatetime', $endDate->format('Y-m-d 23:59:59'));
                }
        }  
        if (isset($searchData['SiteName']) && $searchData['SiteName'] != '') {

            $query->andWhere('wl.id = :whitelabelid')
                    ->setParameter('whitelabelid', $searchData['SiteName']);
        }
        $query->orderBy($order_by, $sort_order);
        
        $countQuery = clone $query;
        $countQuery->select("count(al.id) as totalRecords");
        $objCountData = $countQuery->getQuery()->getOneOrNullResult();
        $countData = $objCountData['totalRecords'];
        
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);

        $result = $query->getQuery()->getArrayResult();

        $dataResult = array();

        if (count($result) > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;

        }
        return false;

    }
    
    
    public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {
                    
                    if ($key == 'Admin' && !empty($val)) {
                        
                        $QueryStr[$i]['Field'] = 'al.admin';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    
                     if ($key == 'User' && !empty($val)) {
                        
                        $QueryStr[$i]['Field'] = 'al.user';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if ($key == 'Activity' && !empty($val)) {
                        
                        $QueryStr[$i]['Field'] = 'al.activity';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if ($key == 'IP' && !empty($val)) {
                        
                        $QueryStr[$i]['Field'] = 'al.ip';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                 
                    $i++;
                }
            } 
        }
        return $QueryStr;
    }
    
    public function getAllActivityLogs() {

        $query = $this->createQueryBuilder('al')
                ->orderBy('al.id', 'desc');

        return $query;
    }

    public function getActivityLogSearch($query, $searchParam) {

        if (isset($searchParam['activity']) && $searchParam['activity']) {
            $query->where('al.activity = :activity')
                    ->setParameter('activity', $searchParam['activity']);
        }
        
        if (isset($searchParam['user']) && $searchParam['user']) {
            $query->andWhere('al.user LIKE :user')
                    ->setParameter('user', '%'. trim($searchParam['user']) . '%');
                    //->andWhere('u.roles LIKE :userRole')
                    //->setParameter('userRole', '%ROLE_USER%');
        }
        
        if (isset($searchParam['admin']) && $searchParam['admin']) {
            $query->andWhere('al.admin LIKE :admin')
                    ->setParameter('admin', '%'. trim($searchParam['admin']) . '%');
                    //->andWhere('a.roles NOT LIKE :adminRole')
                    //->setParameter('adminRole', '%ROLE_USER%');
        }

        if (isset($searchParam['ip']) && $searchParam['ip']) {
            $query->andWhere('al.ip LIKE :ip')
                    ->setParameter('ip', '%' . trim($searchParam['ip']) . '%');
        }

        if (isset($searchParam['sessionId']) && $searchParam['sessionId']) {
            $query->andWhere('al.sessionId = :sessionId')
                    ->setParameter('sessionId', $searchParam['sessionId']);
        }

        if (isset($searchParam['startDate']) && $searchParam['startDate'] != '' && isset($searchParam['endDate']) && $searchParam['endDate'] != '') {

            $query->andWhere('al.timestamp >= :startDate')
                    ->setParameter("startDate", $searchParam['startDate']->format('Y-m-d'));
            $query->andWhere('al.timestamp <= :endDate')
                    ->setParameter("endDate", $searchParam['endDate']->format('Y-m-d'));
        }

        return $query;
    }

}
