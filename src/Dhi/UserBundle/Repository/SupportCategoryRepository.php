<?php

namespace Dhi\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ContactUsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SupportCategoryRepository extends EntityRepository {

    // Added for Gridlist
    
    public function getSupportCategoryGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper) {
        
        $data = $this->trim_serach_data($searchData, $SearchType);
        
        $query = $this->createQueryBuilder('c')
          ->select('c')
          ->leftjoin('c.supportsite','wl')
          ->leftjoin('c.createdBy','cu')
          ->where('c.isDeleted = :isdeleted')
          ->setParameter('isdeleted', 0);

        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {

            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);
       
        $countData = count($query->getQuery()->getArrayResult());
           
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);
       
        $result = $query->getQuery()->getResult();
        
        $dataResult = array();
       
        if ($countData > 0) {
            
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
           
            return $dataResult;
        }
        return false;
    }
    
    // Added For Searching
     public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {
                    
                    if ($key == 'Name' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'c.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';

                    }else if ($key == 'supportsite' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'wl.id';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';

                    }

                  
                    
                    $i++;
                }
            } else {
                
            }
        }
        return $QueryStr;
    }

    public function getSiteWiseSupportCategory($arrParams = array()){
        
        if(!empty($arrParams)){
            
            if($arrParams['oldSequenceNum'] < $arrParams['newSequenceNum']){
                $newSeqOperator = '<=';
                $oldSeqOperator = '>';
            }else{
                $newSeqOperator = '>=';
                $oldSeqOperator = '<';
            }
            
            $query = $this->createQueryBuilder('sc')
                    ->where('sc.supportsite = :siteId')
                    ->setParameter('siteId', $arrParams['supportsiteId'])
                    ->andWhere('sc.sequenceNumber '.$newSeqOperator.' :newSequenceNum')
                    ->setParameter('newSequenceNum', $arrParams['newSequenceNum'])
                    ->andWhere('sc.sequenceNumber '.$oldSeqOperator.' :oldSequenceNum')
                    ->setParameter('oldSequenceNum', $arrParams['oldSequenceNum'])
                    ->andWhere('sc.isDeleted = :isdeleted')
                    ->setParameter('isdeleted', 0)
                    ->orderBy('sc.sequenceNumber', 'asc');
            $result = $query->getQuery()->getResult();

            if(count($result)){
                return $result;
            }
            return false;
        }
    }
    
    public function getSupportCategoryForUpdateSequenceNum($arrParams = array()){
         if($arrParams){
            $query = $this->createQueryBuilder('sc')
                    ->where('sc.supportsite = :supportsite')
                    ->setParameter('supportsite', $arrParams['siteId'])
                    ->andWhere('sc.sequenceNumber > :seqenceNum')
                    ->setParameter('seqenceNum', $arrParams['sequenceNumber'])
                    ->andWhere('sc.isDeleted = :isdeleted')
                    ->setParameter('isdeleted', 0);
            $result = $query->getQuery()->getResult();
            if(count($result) > 0){
                return $result;
            }
         }
         return false;
         
     }
     
    public function getAllSupportCategory() {

        $qb = $this->createQueryBuilder('sc')
                ->andWhere('sc.isDeleted = :isdeleted')
                ->setParameter('isdeleted', 0)
                ->orderBy('sc.name', 'asc')
                ->groupBy('sc.name');

        $result = $qb->getQuery()->getArrayResult();

	return $result ;

    }
    
    public function checkSupportCategoryName($siteId, $name, $id = 0){
        $query = $this->createQueryBuilder('sc')
                ->select('sc')
                ->where('sc.name = :categoryName')
                ->setParameter("categoryName", $name)
                ->andWhere('sc.supportsite = :supportsite')
                ->setParameter("supportsite", $siteId)
                ->andWhere('sc.isDeleted = :is_deleted')
                ->setParameter("is_deleted", 0);
        if(!empty($id)){
                $query->andWhere('sc.id <> :id')->setParameter("id", $id);
        }
        $result = $query->getQuery()->getResult();
        return $result;
    }
}   

