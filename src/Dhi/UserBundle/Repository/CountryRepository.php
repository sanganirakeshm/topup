<?php

namespace Dhi\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CountryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CountryRepository extends EntityRepository {

    public function getAllCountrywiseService() {

        $query = $this->createQueryBuilder('c')
                ->innerJoin('c.countrywiseService', 'cy');

        return $query->getQuery()->getResult();
    }

    public function getAllCountrywiseServiceSearch($query, $search) {

        $query->innerJoin('cy.services', 's')
                ->where('c.name LIKE :cname OR s.name LIKE :cname ')
                ->setParameter('cname', '%' . $search . '%');

        return $query;
    }

    public function getCreditCardCountry() {

        $query = $this->createQueryBuilder('c')
                ->orderBy('c.name', 'ASC');
        $result = $query->getQuery()->getResult();

        $country = array();
        if ($result) {

            foreach ($result as $val) {

                $country[$val->getIsoCode()] = $val->getName();
            }
        }

        return $country;
    }

    public function getCountryWiseGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper) {

        $data = $this->trim_serach_data($searchData, $SearchType);

        $query = $this->createQueryBuilder('c')
                ->innerJoin('c.countrywiseService', 'cy')
                ->innerJoin('cy.services', 's');


        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {

            $query->andWhere($likeStr);
        }

        $query->groupBy('c.id');
        $query->orderBy($orderBy, $sortOrder);

        $countData = count($query->getQuery()->getArrayResult());

        $query->setMaxResults($limit);
        $query->setFirstResult($offset);

        $result = $query->getQuery()->getResult();

        $dataResult = array();

        if ($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
            $dataResult['displayRecord'] = count($result);

            return $dataResult;
        }
        return false;
    }

    public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {

                    if ($key == 'Country' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'c.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    if ($key == 'Services' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 's.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    $i++;
                }
            } else {
                
            }
        }
        return $QueryStr;
    }

    public function getAllCountry() {
        $query = $this->createQueryBuilder('c');

        $result = $query->getQuery()->getArrayResult();

        return $result;
    }

    public function getCountyForShowOnLanding() {
        $query = $this->createQueryBuilder('c')
                ->select('c')
                ->leftJoin('c.countrywiseService', 'cs')
                ->where('cs.isShowOnLanding = :isShow')
                ->setParameter('isShow', 1)
                ->groupBy('c.id');

        $countryArrayResult = $query->getQuery()->getArrayResult();

        if ($countryArrayResult) {
            $countries = array();
            foreach ($countryArrayResult as $country) {
                $countries[$country['isoCode']] = $country['name'];
            }

            return $countries;
        } else {
            $nullArray = array();
            return $nullArray;
        }
    }

}
