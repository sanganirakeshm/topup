<?php

namespace Dhi\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PromoCodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InAppPromoCodeRepository extends EntityRepository {

    //Added for Gridlist
    public function getPromoCodeGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper, $createdBy = '') {

        $data = $this->trim_serach_data($searchData, $SearchType);


        $query = $this->createQueryBuilder('pc')
                ->select('pc')
                ->leftJoin('pc.serviceLocations', 'sl')
                ->orderBy('pc.id', 'desc')
                ->groupBy('pc.id');

        if (!empty($createdBy) && $createdBy != '') {
            $query->where('pc.createdBy = :createdBy')
                    ->setParameter('createdBy', $createdBy);
        }

        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {

            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);

        $countData = count($query->getQuery()->getArrayResult());

        $query->setMaxResults($limit);
        $query->setFirstResult($offset);


        $result = $query->getQuery()->getResult();

        $dataResult = array();

        if ($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }

    public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();
        
        
        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {



                    if ($key == 'PromoCode' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'pc.promoCode';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    
                    if ($key == 'Status' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'pc.status';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }
                    
                    if ($key == 'IsReedemed' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'pc.isRedeemed';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }

                    if ($key == 'ServiceLocation' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'sl.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }
                    if ($key == 'CreatedBy' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'pc.createdBy';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    if ($key == 'Action' && !empty($val)) {

                        $RequestDate = explode('~', $val);
                        $ReqFrom = trim($RequestDate[0]);
                        $ReqTo = trim($RequestDate[1]);

                        if ($ReqFrom != "") {
                            $startDate = new \DateTime($ReqFrom);

                            $QueryStr[$i]['Field'] = 'pc.expiredAt';
                            $QueryStr[$i]['Value'] = $startDate->format('Y-m-d 00:00:00');
                            $QueryStr[$i]['Operator'] = '>=';
                        }
                        if ($ReqTo != "") {
                            if ($ReqFrom != "") {
                                $i++;
                            }
                            $endDate = new \DateTime($ReqTo);
                            $QueryStr[$i]['Field'] = 'pc.expiredAt';
                            $QueryStr[$i]['Value'] = $endDate->format('Y-m-d 23:59:59');
                            $QueryStr[$i]['Operator'] = '<=';
                        }
                    }
                    $i++;
                }
            } else {
                
            }
        }
        return $QueryStr;
    }

    public function checkPromoCodeExist() {

        // $data = $this->trim_serach_data($searchData, $SearchType);

        $query = $this->createQueryBuilder('pc')
                ->select('pc')
                ->where('pc.status = :status')
                ->setParameter('status', 1)
                ->leftJoin('pc.serviceLocations', 'sl')
                ->orderBy('pc.id', 'desc');



        $result = $query->getQuery()->getArrayResult();


        return $result;
    }

    public function getPdfPromoData($searchData) {

        $query = $this->createQueryBuilder('pc')
                ->select('pc')
                ->leftJoin('pc.serviceLocations', 'sl')
                ->orderBy('pc.id', 'desc')
                ->groupBy('pc.id');


        if (!empty($searchData['CreatedBy'])) {
            $query->andwhere('pc.createdBy LIKE :uname')
                    ->setParameter('uname', '%' . $searchData['CreatedBy'] . '%');
        }
        if (!empty($searchData['ServiceLocation'])) {
            $query->andwhere('sl.name = :slname')
                    ->setParameter('slname', $searchData['ServiceLocation']);
        }
        if (!empty($searchData['PromoCode'])) {
            $query->andwhere('pc.promoCode = :pmname')
                    ->setParameter('pmname', $searchData['PromoCode']);
        }
        if (!empty($searchData['Action'])) {
            $RequestDate = explode('~', $searchData['Action']);
            $ReqFrom = trim($RequestDate[0]);
            $ReqTo = trim($RequestDate[1]);

            if ($ReqFrom != "") {
                $startDate = new \DateTime($ReqFrom);
                $query->andwhere('pc.expiredAt >= :createdStartAt')->setParameter('createdStartAt', $startDate->format('Y-m-d 00:00:00'));
            }
            if ($ReqTo != "") {
                $endDate = new \DateTime($ReqTo);
                $query->andwhere('pc.expiredAt <= :createdEndAt')->setParameter('createdEndAt', $endDate->format('Y-m-d 23:59:59'));
            }
        }

        $result = $query->getQuery()->getResult();

        return $result;
    }

    public function getServicePromoData($promocode) {

        $query = $this->createQueryBuilder('pc')
                ->select('pc')
                ->leftJoin('pc.serviceLocations', 'sl')
                ->orderBy('pc.id', 'desc')
                ->groupBy('pc.id');

        if (!empty($promocode)) {
            $query->andwhere('pc.promoCode = :pmname')
                    ->setParameter('pmname', $promocode);
        }

        $result = $query->getQuery()->getResult();

        return $result;
    }

}
