<?php

namespace Dhi\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserServiceRepository extends EntityRepository {

    public function getUserPurchaseHistory($user) {

        $queryPurchaseHistory = $this->createQueryBuilder('us')
            ->leftJoin('us.purchaseOrder', 'po')
            ->leftJoin('us.service', 's')
            ->leftJoin('us.user', 'u')
            ->leftJoin('po.paypalCheckout', 'pp')
            ->leftJoin('po.paymentMethod', 'pm')
            ->where('us.user = :userId')
            ->setParameter('userId', $user)
            ->orderby('us.id', 'DESC');

        return $queryPurchaseHistory;
    }

    public function getFreeTrialUsers($userArray,$packageArray){
        $queryPurchaseHistory = $this->createQueryBuilder('us')
                ->innerJoin('us.service', 's')
                ->leftJoin('us.user', 'u')
                ->where('us.status = :status')
                ->setParameter('status', 1)
                ->andWhere('us.packageName = :packageName')
                ->setParameter('packageName', 'Free Trial')
                ->andWhere('s.name = :name')
                ->setParameter('name', 'IPTV')
                ->andWhere('DATE_DIFF(CURRENT_DATE(),us.activationDate ) > 10');
        
       if($userArray!=0 && $packageArray!=0){
          // print_r($userArray); die;
         $queryPurchaseHistory->andWhere('u.id NOT IN (:Userids)')->setParameter('Userids', $userArray);
         $queryPurchaseHistory->andWhere('us.packageId NOT IN (:Packageids)')->setParameter('Packageids', $packageArray);
       }
        
         $queryPurchaseHistory->orderby('us.id', 'DESC');

        $query = $queryPurchaseHistory->getQuery();

        return $query->getResult();
        
    }
    public function getActiveUserQuery($user, $ipAddressZones, $country, $searchData, $chart = false, $flagPackage = false) {

		// payment methods
		$paymentMethod = array('Paypal', 'Credit Card', 'Milstar', 'Cash', 'Eagle Cash');

//		$query = $this->createQueryBuilder('po');

                $query = $this->createQueryBuilder('p');

//		if ($flagPackage) {
//
//			$query->select('us.packageId', 'us.actualAmount', 'SUM(us.payableAmount) as totalActualAmount', 'us.packageName', 'po.id as purchaseOrderId', 'us.payableAmount as totalAmount', 'pm.name as paymentMethod', 'sp.id as servicePurchaseId', 's.name as serviceName', 'u.username', 'po.createdAt', 'us.createdAt as createDate', 'u.ipAddressLong as userServiceLocationIp', 'us.serviceLocationIp');
//		} else {
//
//			$query->select('po.id as purchaseOrderId', 'us.payableAmount as totalAmount', 'pm.name as paymentMethod', 'sp.id as servicePurchaseId', 's.name as serviceName', 'u.username', 'po.createdAt', 'us.createdAt as createDate', 'u.ipAddressLong as userServiceLocationIp', 'us.serviceLocationIp');
//		}
                $query->select('count(p.package_id) as totalMember','p.package_name as packageName','p.package_name as location');

                $query->groupBy('p.package_id');

//		$query->leftJoin('po.servicePurchases', 'sp')
//				->leftJoin('po.paymentMethod', 'pm')
//				->leftJoin('sp.userService', 'us')
//				->leftJoin('sp.service', 's')
//				->leftJoin('sp.user', 'u')
//				->leftJoin('u.userServiceLocation', 'usl');


//		$query->where('sp.purchaseOrder > :purchaseOrder')
//				->setParameter('purchaseOrder', 0);
//
//		$query->andWhere('sp.paymentStatus = :ppaystatus')
//				->setParameter('ppaystatus', 'Completed');
//
//
//		$query->andWhere('po.paymentStatus = :postatus')
//				->setParameter('postatus', 'Completed');
//
//		$query->andWhere('pm.name IN (:pmName)')
//				->setParameter('pmName', $paymentMethod);

//		if ($user) {
//
//			$query->andWhere('po.user = :userId')->setParameter('userId', $user);
//		}
//
//		if ($country != '') {
//
//			$query->andWhere('u.userServiceLocation IN (:country)');
//			$query->setParameter('country', $country);
//		}


//		if (!empty($searchData)) {
//
//			if (isset($searchData['totalSales'])) {
//
//				$RequestDate = explode('~', $searchData['totalSales']);
//				$ReqFrom = trim($RequestDate[0]);
//				$ReqTo = trim($RequestDate[1]);
//
//				if ($ReqFrom != "") {
//					$startDate = new \DateTime($ReqFrom);
//					$query->andWhere('po.createdAt >= :today_startdatetime');
//					$query->setParameter('today_startdatetime', $startDate->format('Y-m-d 00:00:00'));
//				}
//				if ($ReqTo != "") {
//					$endDate = new \DateTime($ReqTo);
//					$query->andWhere('po.createdAt <= :today_enddatetime');
//					$query->setParameter('today_enddatetime', $endDate->format('Y-m-d 23:59:59'));
//				}
//			}
//
//			if (isset($searchData['serviceType']) && $searchData['serviceType'] != '') {
//				$query->andWhere('s.name = :servicename')
//                                        ->setParameter('servicename', $searchData['serviceType']);
//			}
//
//			if (isset($searchData['paymentMethod']) && $searchData['paymentMethod'] != '') {
//				$query->andWhere('pm.name LIKE :paymentmethod')
//						->setParameter('paymentmethod', '%' . $searchData['paymentMethod'] . '%');
//			}
//
//			if (!$chart && empty($searchData['totalSales'])) {
//
//				$firstDatePreviousMonth = new \DateTime();
//				$firstDatePreviousMonth = $firstDatePreviousMonth->modify('first day of previous month');
//
//				$lastDatePreviousMonth = new \DateTime();
//				$lastDatePreviousMonth = $lastDatePreviousMonth->modify('last day of previous month');
//
//				$query->andWhere('po.createdAt >= :today_startdatetime');
//				$query->setParameter('today_startdatetime', $firstDatePreviousMonth->format('Y-m-d 00:00:00'));
//
//				$query->andWhere('po.createdAt <= :today_enddatetime');
//				$query->setParameter('today_enddatetime', $lastDatePreviousMonth->format('Y-m-d 23:59:59'));
//			}
//		} else {
//
//			if (!$chart) {
//
//				$firstDatePreviousMonth = new \DateTime();
//				$firstDatePreviousMonth = $firstDatePreviousMonth->modify('first day of previous month');
//
//				$lastDatePreviousMonth = new \DateTime();
//				$lastDatePreviousMonth = $lastDatePreviousMonth->modify('last day of previous month');
//
//				$query->andWhere('po.createdAt >= :today_startdatetime');
//				$query->setParameter('today_startdatetime', $firstDatePreviousMonth->format('Y-m-d 00:00:00'));
//
//				$query->andWhere('po.createdAt <= :today_enddatetime');
//				$query->setParameter('today_enddatetime', $lastDatePreviousMonth->format('Y-m-d 23:59:59'));
//			}
//		}
//
//		$query->orderby('usrv.id', 'DESC');
//
//		if ($flagPackage) {
//
//			$query->groupBy('us.packageId');
//			$query->addGroupBy('us.service');
//			$query->addGroupBy('us.actualAmount');
//		}


		return $query;
    }

    public function getActiveUserReportGrid($limit = 0, $offset = 10, $order_by = "id", $sort_order = "asc", $searchData, $SearchType, $objHelper, $user = "", $ipAddressZones = "", $admin = '', $country = '') {

		$query = $this->getActiveUserQuery($user, $ipAddressZones, $country, $searchData);
		$query->orderBy($order_by, $sort_order);
		$resultData = $query->getQuery()->getArrayResult();

		return $this->getSalesData($resultData);
	}

    public function getPurchaseHistory() {

        $queryPurchaseHistory = $this->createQueryBuilder('sp')
                                ->leftJoin('sp.purchaseOrder', 'po')
                                ->leftjoin('sp.userService', 'us')
                                ->leftJoin('sp.service', 's')
                                ->leftJoin('sp.user', 'u')
                                ->leftJoin('po.paypalCheckout', 'pp')
                                ->leftJoin('po.paymentMethod', 'pm')
                                ->orderby('sp.id', 'DESC');


        return $queryPurchaseHistory;
    }

    public function getSearchPurchaseHistory($query, $search) {

        $query->andWhere('u.username LIKE :username')->setParameter('username', '%' . $search . '%');

        return $query;
    }

    public function getExpiredPackage() {

        $date = new \DateTime();

        $qb = $this->createQueryBuilder('us')
            ->select('us')
            ->where('us.expiryDate <= :expiryDate')
            ->setParameter('expiryDate', $date->format('Y-m-d H:i:s'))
            ->andWhere('us.status = :status')
            ->setParameter('status', 1)
            ->andWhere('us.isPlanActive = :isPlanActive')
            ->setParameter('isPlanActive', 1);

        $expiredData = $qb->getQuery()->getResult();

        if($expiredData) {

            return $expiredData;
        }

        return false;
    }

    public function getExpiredPackageForNotification() {

        $expdate = new \DateTime();
        $expdate->modify('+72 HOURS');

        $qb = $this->createQueryBuilder('us')->select('us')
            ->where('us.expiryDate = :expiryDate')
            ->setParameter('expiryDate', $expdate->format('Y-m-d 23:59:59'))
            ->andWhere('us.status = :status')->setParameter('status', 1)
            ->andWhere('us.sentExpiredNotification != :sentExpiredNotification')
            ->setParameter('sentExpiredNotification', 1);

        $expiredData = $qb->getQuery()->getResult();

        if($expiredData) {

            return $expiredData;
        }

        return false;
    }

    public function getServicePurchasedUsers($serviceids, $fromIp, $toIp) {
        
        $qb = $this->createQueryBuilder('us')
                    ->select('u.id', 'u.isEmailOptout', 'u.email', 'u.firstname', 'u.isEmailVerified')
                    ->innerJoin('us.user', 'u')
                    ->where('us.service IN(:serviceIds)')
                    ->setParameter('serviceIds', array_values($serviceids))
                    ->andWhere('u.isEmailOptout = :isEmailOptout')
                    ->setParameter('isEmailOptout', 0)
                    ->andWhere('us.serviceLocationIp >=:fromIP')
                    ->setParameter('fromIP', $fromIp)
                    ->andWhere('us.serviceLocationIp <=:toIP')
                    ->setParameter('toIP', $toIp)
                    ->andWhere('us.status =:status')
                    ->setParameter('status', 1)
                    ->andWhere('us.isPlanActive =:isPlanActive')
                    ->setParameter('isPlanActive', 1)
                    ->andWhere('us.expiryDate !=:edate')
                    ->setParameter('edate', '')
                    ->andWhere('us.expiryDate >=:exdate')
                    ->setParameter('exdate', date('Y-m-d H:i:s'))
                    ->andWhere('u.expiresAt >=:expdate')
                    ->setParameter('expdate', date('Y-m-d H:i:s'))
                    ->andWhere('u.lastLogin !=:lastlogedin')
                    ->setParameter('lastlogedin', '')
                    ->groupBy('us.user');

        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     *
     * @param object $user
     * @param boolean $flag
     *
     * $flag represent the status of the purchased service.
     */
    public function getUsersPurchasedService($user, $flag) {

        $result = array();
        $date = new \DateTime();
        $query = $this->createQueryBuilder('us')->select('us')->where('us.user = :user')->setParameter('user', $user);
        $query->andwhere('us.expiryDate > :expiryDate')
              ->setParameter('expiryDate', $date->format('Y-m-d H:i:s'));

        if(! $flag) {

            $query->andWhere('us.status = :status')->setParameter('status', 1);
        }
        $query->orderBy('us.isAddon', 'ASC');

        $result = $query->getQuery()->getResult();

        return $result;
    }

    public function getActiveServices($userId, $type = null) {
        $services = array();

        $qb = $this->createQueryBuilder('us')
        ->where('us.user = :userId')
        ->setParameter('userId', $userId)
        ->andWhere('us.status = :status')
        ->setParameter('status', 1);

        $result = $qb->getQuery()->getResult();

        if($type == 'all'){
            return $result;
        }else{
            if($result) {
                foreach($result as $record) {
                    $services[strtoupper($record->getService()->getName())] = strtoupper($record->getService()->getName());
                }
            }

            return $services;
        }
    }

    public function countUserPurchaseService($userId,$countActiveService = false) {

	    $query = $this->createQueryBuilder('us')
	    			->select('count(us.id)')
	    			->where('us.user = :userId')
	    			->setParameter('userId', $userId);

	    if($countActiveService){

	    	$query->andWhere('us.status = :status')->setParameter('status', 1);
    	}

	    $result = $query->getQuery()->getSingleScalarResult();

	    return $result;
    }

    public function getUserActiveServiceForCompensation($serviceNameArr, $userId = 0, $isUser = false, $checkActive = true, $serviceLocations = NULL, $compensation = null){

        if (isset($serviceNameArr) && !empty($serviceNameArr)){
            $slCondition = '';

            // Get Compensation User Services
            $cusRepo = $this->_em->getRepository('DhiUserBundle:CompensationUserService');
            $existingUser = $cusRepo->createQueryBuilder('cus')
                ->select('us.id AS id')
                ->innerJoin('cus.userService', 'us')
                ->innerJoin('us.user', 'u')
                ->innerJoin('us.servicePurchase', 'sp')
                ->innerJoin('sp.service_location_id', 'sl')
                ->andWhere('us.status = :status')
                ->setParameter('status', 1)
                ->andWhere('cus.compensation = :compensation')
                ->setParameter('compensation', $compensation);

            if ($serviceLocations != NULL) {

                foreach ($serviceLocations as $sl) {
                    $slCondition .= 'sl.id = '.$sl->getId().' OR ';
                }
                $slCondition = '('.rtrim($slCondition, 'OR ').')';

                $existingUser->andWhere('u.locked = :locked')
                    ->setParameter('locked', 0)
                    ->andWhere('u.isDeleted = :deleted')
                    ->setParameter('deleted', 0)
                    ->andWhere('u.roles LIKE :role')
                    ->setParameter('role', '%ROLE_USER%')
                    ->andWhere($slCondition);
            }

            if ($userId > 0) {
                $existingUser->andWhere('u.id = :userId')->setParameter('userId', $userId);
            }

            $res               = $existingUser->getQuery()->getArrayResult();
            $existingUserPlans = array();
            if ($res) {
                foreach ($res as $key => $value) {
                    $existingUserPlans[] = $value['id'];
                }
            }

            $userActiveServiceNameArr = array();
            $queryServiceName = $this->createQueryBuilder('us')
                ->select('us','u')
                ->leftJoin('us.service', 's')
                ->innerJoin('us.user', 'u')
                ->innerJoin('us.servicePurchase', 'sp')
                ->innerJoin('sp.service_location_id', 'sl')
                ->where('us.status = :status')
                ->setParameter('status', 1)
                ->andWhere('us.isAddon = :is_addon')
                ->setParameter('is_addon', 0)
                ->andWhere('us.expiryDate > :expiry_date')
                ->setParameter('expiry_date', new \DateTime('now'))
                ->orderBy('u.id');

            if(count($serviceNameArr) > 1) {
                $queryServiceName->andWhere('s.name IN (:servicename)')->setParameter('servicename', $serviceNameArr);
            } else {
                $queryServiceName->andWhere('s.name = :servicename OR sp.purchase_type = :purchase_type')
                    ->setParameter('servicename', $serviceNameArr[0])
                    ->setParameter('purchase_type', "BUNDLE");
            }

            if ($userId > 0) {
                $queryServiceName->andWhere('u.id = :userId')->setParameter('userId', $userId);
            }else{
                $queryServiceName
                    ->andWhere('us.createdAt < :created_at')
                    ->setParameter('created_at', $compensation->getCreatedAt());
            }

            if($checkActive == true){
                $queryServiceName->andWhere('us.isPlanActive = :isPlanActive')->setParameter('isPlanActive', 1);
            }

            // if(in_array("BUNDLE", $serviceNameArr)){
            //     $queryServiceName->andWhere('sp.purchase_type = :purchase_type')->setParameter('purchase_type', 'BUNDLE');
            // }

            if (!empty($slCondition) && $serviceLocations != NULL) {
                if (!empty($existingUserPlans)) {
                    $queryServiceName
                        ->andWhere("us.id NOT IN (:existingUserPlans)")
                        ->setParameter('existingUserPlans', $existingUserPlans);
                }

                $queryServiceName->andWhere('u.locked = :locked')
                    ->setParameter('locked', 0)
                    ->andWhere('u.isDeleted = :deleted')
                    ->setParameter('deleted', 0)
                    ->andWhere('u.roles LIKE :role')
                    ->setParameter('role', '%ROLE_USER%')
                    ->andWhere($slCondition);
            }

            $serviceResult = $queryServiceName->getQuery()->getResult();

            $finalReturn = array();
            if($serviceResult){

                foreach ($serviceResult as $userService){
                    if($userService->getService()){

                        $compServiceQuery = $this->_em->getRepository("DhiUserBundle:CompensationUserService")
                            ->createQueryBuilder('cus')
                            ->innerJoin("cus.userService", 'us')
                            ->innerJoin("cus.compensation", 'co')
                            ->select("count(cus.id)")
                            ->where("us.id = :usId")
                            ->setParameter("usId", $userService->getId())
                            ->andWhere("co.id = :coId")
                            ->setParameter("coId", $compensation);
                        $compService = $compServiceQuery->getQuery()->getSingleScalarResult();

                        if (!empty($compService) && $compService > 0) {
                            continue;
                        }

                        $userId      = $userService->getUser()->getId();
                        $bundleId    = $userService->getServicePurchase()->getBundleId();
                        $serviceName = strtoupper($userService->getService()->getName());

                        $userActiveServiceNameArr[$userId][$serviceName] = $userService;
                        $userActiveServiceNameArr[$userId]['Service'][]  = $serviceName;

                        $returnResult = array();
                        $returnResult[$userId]['autoExtendService'] = '';
                        $returnResult[$userId]['data']              = '';
                        if(isset($userActiveServiceNameArr[$userId]['Service']) && !empty($userActiveServiceNameArr[$userId]['Service'])){

                            if((in_array('IPTV',$serviceNameArr) && in_array('ISP',$serviceNameArr)) || (in_array('BUNDLE',$serviceNameArr))  && $isUser == false){
                                $returnResult[$userId]['data'][$serviceName] = $userActiveServiceNameArr[$userId][$serviceName];

                            }else if(in_array('IPTV',$serviceNameArr)){
                                if(in_array('IPTV',$userActiveServiceNameArr[$userId]['Service'])){
                                    $returnResult[$userId]['data']['IPTV'] = $userActiveServiceNameArr[$userId]['IPTV'];
                                }
                            }else if(in_array('ISP',$serviceNameArr)){
                                if(in_array('ISP',$userActiveServiceNameArr[$userId]['Service'])){
                                    $returnResult[$userId]['data']['ISP'] = $userActiveServiceNameArr[$userId]['ISP'];
                                }
                            }

                            if (!in_array($serviceName,$serviceNameArr) && !empty($bundleId)) {
                                $returnResult[$userId]['autoExtendService'] = $serviceName;
                                $returnResult[$userId]['data'][$serviceName] = $userActiveServiceNameArr[$userId][$serviceName];
                            }

                            if($isUser == true && in_array('IPTV',$userActiveServiceNameArr[$userId]['Service']) && empty($returnResult[$userId]['data']['IPTV'])){
                                $returnResult[$userId]['data']['IPTV'] = $userActiveServiceNameArr[$userId]['IPTV'];
                            }

                            if (!empty($returnResult[$userId]['data'][$serviceName])) {
                                if (empty($finalReturn[$userId]['autoExtendService'])) {
                                    $finalReturn[$userId]['autoExtendService'] = $returnResult[$userId]['autoExtendService'];
                                }
                                $finalReturn[$userId]['data'][$serviceName] = $returnResult[$userId]['data'][$serviceName];
                            }
                        }
                    }
                }
                return $finalReturn;
            }
        }

        return false;
    }

    public function getInactiveIspPlans(){
        $query = $this->createQueryBuilder('us')
                ->leftJoin('us.service', 's')
                ->leftJoin('us.user', 'u')
                ->where('us.isPlanActive = :isPlanActive')
                ->setParameter('isPlanActive', 0)
                ->andWhere('s.name = :name')
                ->setParameter('name', 'ISP')
                ->andWhere('us.status = :status')
                ->setParameter('status', 1)
                ->orderby('us.id', 'DESC');
        $result = $query->getQuery()->getResult();
        return $result;
    }

    public function getPlanPlans(){
        $today = new \DateTime();
        $query = $this->createQueryBuilder('us')
                ->leftJoin('us.service', 's')
                ->leftJoin('us.user', 'u')
                ->where('us.isPlanActive = :isPlanActive')
                ->setParameter('isPlanActive', 1)
                ->andWhere('u.isEmployee = :isEmployee')
                ->setParameter('isEmployee', 1)
                ->andWhere('us.expiryDate <= :expiryDate')
                ->setParameter('expiryDate', $today->format('Y-m-d 23:59:59'))
                ->andWhere('s.name IN (:service)')
                ->setParameter('service', array('ISP','IPTV'))
                ->andWhere('us.status = :status')
                ->setParameter('status', 1)
                ->orderby('us.id', 'DESC');
        $result = $query->getQuery()->getResult();
        return $result;
    }

    public function getCompensationTotalValidity($userService){
        $query = $this->createQueryBuilder('us')
            ->select("SUM(c.ispHours) as ispHours","SUM(c.iptvDays) as iptvDays")
            ->innerJoin("us.compensationUserService", "cus")
            ->innerJoin("cus.compensation", "c")
            ->where('us.id = :userServiceId')
            ->setParameter("userServiceId", $userService->getId())
            ->andWhere('cus.status = :status')
            ->setParameter("status", 1);

        $result = $query->getQuery()->getOneOrNullResult();
        if ($result != null) {
            return (!empty($result['ispHours']) ? $result['ispHours'] : 0) + (!empty($result['iptvDays']) ? $result['iptvDays'] : 0);
        }
        return 0;
    }

    public function getRefundUserServiceData($userId,$serviceTypeArr,$isAddOn,$userServiceId){

        $query = $this->createQueryBuilder('us')
                        ->leftJoin('us.purchaseOrder', 'po')
                        ->leftJoin('us.service', 's')
                        ->leftJoin('us.user', 'u')
                        ->leftJoin('po.paypalCheckout', 'pp')
                        ->leftJoin('po.paymentMethod', 'pm')
                        ->leftJoin('po.milstar', 'm')
                        ->where('us.user = :userId')
                        ->setParameter('userId', $userId)
                        ->andWhere('us.status = :status')
                        ->setParameter('status', 1)
                        ->orderby('us.id', 'DESC');

        if(isset($serviceTypeArr)){

            $query->andWhere('s.name IN(:name)')->setParameter('name', $serviceTypeArr);
        }

        $query->andWhere('us.isAddon =:isAddon')->setParameter('isAddon', $isAddOn);
        if($userServiceId && $isAddOn == 1) {
            $query->andWhere('us.id =:usid')->setParameter('usid', $userServiceId);
            //$query->andWhere('find_in_set(us.id,:usid)')->setParameter('usid', $userServiceId);
        }
        //$query->andWhere('us.id =:usid')->setParameter('usid', $userServiceId);

        $result = $query->getQuery()->getResult();

        $refundData = $this->activeServiceList($result, 'active');

        //echo "<pre>";print_r($refundData);exit;
        return $refundData;
    }

    public function activeServiceList($result, $planType = 'active'){

        $refundData = array();
        $refundData['IPTV']  = '';
        $refundData['IPTVSubTotalRefundAmt']   = 0.00;

        $refundData['TVOD']  = '';
        $refundData['TVODSubTotalRefundAmt']   = 0.00;

        $refundData['BUNDLE']   = '';
        $refundData['BUNDLESubTotalRefundAmt']    = 0.00;

        $refundData['ISP']   = '';
        $refundData['ISPSubTotalRefundAmt']    = 0.00;

        $refundData['ISPSubTotalRefundAmt']    = 0.00;
        $refundData['AddOn'] = '';
        $refundData['AddOnSubTotalRefundAmt']  = 0.00;

        $refundData['TotalRefundAmt']  = 0.00;
        $refundData['PaymentMethod']   = '';
        $refundData['purchaseOrderId'] = '';

        $refundData['TotalOriginalAmt']  = 0.00;
        $refundData['TotalPayableAmt']  = 0.00;
        $refundData['TotalActualAmt']  = 0.00;
        if($result) {

            foreach ($result as $userService) {

                if (($userService->getStatus() == 1 || $planType == 'expired') && $userService->getRefund() == 0) {

                    //Get date diffreance of Active nad Expiry date
                    $todayDateTime  = new \DateTime();
                    $activationDate = $userService->getActivationDate();
                    $expiredDate    = $userService->getExpiryDate();
                    $isPlanActive   = $userService->getIsPlanActive();
                    $validity       = $userService->getValidity();
                    $suspendedValidity = 0;
                    $actualValidity = ($userService->getActualValidity() > 0 ? $userService->getActualValidity() : $userService->getValidity());
                    
                    $validitytype = $userService->getServicePurchase()->getValidityType();
                    
                    $interval = $activationDate->diff($expiredDate);
                    if($validitytype == 'HOURS') {
                        $packageValidaityDays =  $interval->format('%h'); 
                    } else {
                       $packageValidaityDays =  $interval->format('%a'); 
                    }
                    
                   
                    $suspendedValidity = $this->_em->getRepository("DhiAdminBundle:UserSuspendHistory")->getTotalSuspendedHours($userService->getId());
                    if ($isPlanActive == true && $planType == 'active'){

                        $daysInterval = $todayDateTime->diff($activationDate);
                        if (!empty($daysInterval)) {
                            if($validitytype == 'HOURS') {
                                $noOfdaysUsed = $daysInterval->format('%h');
                            } else {
                                $noOfdaysUsed = $daysInterval->format('%a');
                            }

                            if (!empty($suspendedValidity)) {
                                $validity -= $suspendedValidity;
                                $noOfdaysUsed -= $suspendedValidity;
                            } else {
                                $suspendedValidity = 0;
                            }

                            $compensationValidity = $this->getCompensationTotalValidity($userService);
                            if ($compensationValidity > 0) {
                                $compValidiyInDays = floor($compensationValidity / 24);
                                $actualValidity = ($validity - $compValidiyInDays);
                            }else{
                                $actualValidity = $validity;
                            }

                            if (!empty($daysInterval) && ($daysInterval->h > 0 || $daysInterval->i > 0 || $daysInterval->s > 0)) {
                                if ($todayDateTime > $activationDate) {
                                    $remainingDaysForRefund = $actualValidity - ($noOfdaysUsed + 1);
                                    $remainingDays          = $validity - ($noOfdaysUsed + 1);
                                }else{
                                    $remainingDaysForRefund = $actualValidity - $noOfdaysUsed;
                                    $remainingDays          = $validity - $noOfdaysUsed;
                                }

                            } else {
                                $remainingDays          = $validity - $noOfdaysUsed;
                                $remainingDaysForRefund = $actualValidity - ($noOfdaysUsed + 1);
                            }
                        }
                    }else{
                        $noOfdaysUsed = $interval = 0;
                        $validity -= $suspendedValidity;
                        $remainingDaysForRefund = $remainingDays =  $validity;
                    }

                    //End here
                    $refundData['TotalOriginalAmt'] += $userService->getActualAmount();
                    $refundData['TotalPayableAmt'] += $userService->getPayableAmount();
                    $refundData['TotalActualAmt'] += $userService->getActualAmount();
                    $finalCost = $prevCredit = 0;

                    if ($remainingDaysForRefund < 0) {
                        $remainingDaysForRefund = 0;
                    }

                    // if (($packageValidaityDays == ($validity + $suspendedValidity) || $planType == 'expired') && $remainingDaysForRefund >= 0){
                    if ($remainingDaysForRefund >= 0 && ($expiredDate > $todayDateTime || $planType == 'expired')){

                        if ($planType == 'expired') {
                            $finalCost = $userService->getActualAmount();
                        } else {
                            $finalCost = $userService->getFinalCost();
                        }

                        $prevCredit = $userService->getUnusedCredit();
                        if($prevCredit > 0){
                            $finalCost += $prevCredit;
                        }

                        $perDayAmount = $finalCost / $actualValidity;
                        $refundAmount = $perDayAmount * $remainingDaysForRefund;
                        $serviceName = strtoupper($userService->getService()->getName());

                        if ($userService->getIsAddon() == 1){
                            $serviceName = 'AddOn';
                        }

                        $tempArr['userId']            = ($userService->getUser())?$userService->getUser()->getId():'';
                        $tempArr['userServiceId']     = $userService->getId();
                        $tempArr['servicePurchaseId'] = ($userService->getServicePurchase())?$userService->getServicePurchase()->getId():'';
                        $tempArr['packageId']         = $userService->getPackageId();
                        $tempArr['packageName']       = $userService->getPackageName();
                        $tempArr['validity']          = $validity;
                        $tempArr['bandwidth']         = $userService->getbandwidth();
                        $tempArr['payableAmount']     = $userService->getPayableAmount();
                        $tempArr['paymentMethod']     = ($userService->getPurchaseOrder()) ? $userService->getPurchaseOrder()->getPaymentMethod()->getName():'';
                        $tempArr['actualAmount']      = $userService->getActualAmount();
                        $tempArr['refundAmount']      = number_format($refundAmount,2);
                        $tempArr['discountAmount']    = ($userService->getTotalDiscount() > 0)?$userService->getTotalDiscount():'0.00';
                        $tempArr['unusedCredit']      = ($userService->getUnusedCredit() > 0)?$userService->getUnusedCredit():'0.00';
                        $tempArr['finalCost']         = $userService->getFinalCost();
                        $tempArr['remainingDays']     = $remainingDays;
                        $tempArr['activationDate']    = $userService->getActivationDate()->format('m/d/Y');
                        $tempArr['expiryDate']        = (($isPlanActive == true) ? $userService->getExpiryDate()->format('m/d/Y') : '-');
                        $tempArr['isPlanActive']      = $isPlanActive;
                        $tempArr['isExtend']          = $userService->getIsExtend();
                        $tempArr['validityType']      = $userService->getServicePurchase()->getvalidityType();
                        $tempArr['bundleId']          = ($userService->getServicePurchase())?$userService->getServicePurchase()->getbundleId():'';
                        $tempArr['bundleDiscountPer'] = ($userService->getServicePurchase())?$userService->getServicePurchase()->getbundleDiscount():'';
                        $tempArr['bundleName']        = ($userService->getServicePurchase())?$userService->getServicePurchase()->getbundleName():'';
                        $tempArr['displayBundleName'] = ($userService->getServicePurchase())?$userService->getServicePurchase()->getdisplayBundleName():'';
                        $tempArr['purchaseType']      = ($userService->getServicePurchase())?$userService->getServicePurchase()->getpurchaseType():'';
                        $tempArr['serviceLocation']   = $userService->getServicePurchase()->getServiceLocationId() ? $userService->getServicePurchase()->getServiceLocationId()->getName() : 'N/A';

                        if($tempArr['purchaseType'] == 'BUNDLE'){
                            $refundData['BUNDLE'][$tempArr['bundleId']]['userId']            = $tempArr['userId'];
                            $refundData['BUNDLE'][$tempArr['bundleId']]['userServiceId'][]   = $tempArr['userServiceId'];
                            $refundData['BUNDLE'][$tempArr['bundleId']][$serviceName][]      = $tempArr;
                            $refundData['BUNDLE'][$tempArr['bundleId']]['bundleName']        = $tempArr['bundleName'];
                            $refundData['BUNDLE'][$tempArr['bundleId']]['displayBundleName'] = $tempArr['displayBundleName'];
                        }
                        $refundData[$serviceName][] = $tempArr;

                        /* if($userService->getTotalDiscount() > 0){

                        	$tempArrDiscount = array();
                        	$tempArrDiscount['isDiscountAvailable'] = 1;
                        	$tempArrDiscount['isUnusedCreditAvailable'] = 0;

                        	$tempArrDiscount['TotalDiscount']      = $userService->getTotalDiscount();
                        	$tempArrDiscount['Discription']        = $userService->getDiscountRate().'% Bundle discount on '.$serviceName.' Package';
                        	$refundData[$serviceName][]  = $tempArrDiscount;
                        }

                        if($userService->getUnusedCredit() > 0){

                        	$tempArrCredit = array();
                        	$tempArrCredit['isDiscountAvailable'] = 0;
                        	$tempArrCredit['isUnusedCreditAvailable'] = 1;

                        	$tempArrCredit['TotalUnusedCredit']  = $userService->getUnusedCredit();
                        	$tempArrCredit['Discription']        = 'Existing '.$serviceName.' Pack Unused credit';
                        	$refundData[$serviceName][]   = $tempArrCredit;
                        } */

                        $refundData[$serviceName.'SubTotalRefundAmt']  += $tempArr['refundAmount'];

                        if($userService->getPurchaseOrder()){

                            $paymentMethod = $userService->getPurchaseOrder()->getPaymentMethod();
                            if($paymentMethod){

                                $refundData['PaymentMethod'] = $paymentMethod->getCode();

                                if($paymentMethod->getCode() == 'PayPal' || $paymentMethod->getCode() == 'CreditCard'){

                                    $paypalCheckout = $userService->getPurchaseOrder()->getPaypalCheckout();

                                    if($paypalCheckout){

                                        $refundData[$paymentMethod->getCode()]['paypalTransactionId']   = $paypalCheckout->getPaypalTransactionId();
                                        $refundData[$paymentMethod->getCode()]['invoiceNo']             = $userService->getPurchaseOrder()->getOrderNumber();
                                    }
                                }
                                if($paymentMethod->getCode() == 'Milstar'){

                                    $milstar = $userService->getPurchaseOrder()->getMilstar();

                                    if($milstar){

                                        $refundData[$paymentMethod->getCode()]['facNbr']        = $milstar->getFacNbr();
                                        $refundData[$paymentMethod->getCode()]['cid']           = $milstar->getCid();
                                        $refundData[$paymentMethod->getCode()]['authCode']      = $milstar->getAuthCode();
                                        $refundData[$paymentMethod->getCode()]['authTicket']    = $milstar->getAuthTicket();
                                        $refundData[$paymentMethod->getCode()]['cardNo']        = $milstar->getCardNo();
                                        $refundData[$paymentMethod->getCode()]['invoiceNo']     = $userService->getPurchaseOrder()->getOrderNumber();

                                    }
                                }
                            }
                        }
                    }
                }

                if(!$refundData['purchaseOrderId']){

                    $refundData['purchaseOrderId']   = ($userService->getPurchaseOrder())?$userService->getPurchaseOrder()->getId():'';
                }
            }
            
            if($refundData['TotalActualAmt'] < $refundData['TotalPayableAmt']){
                $refundData['TotalActualAmt'] = number_format($refundData['TotalPayableAmt'],2);
            }
            $refundData['TotalRefundAmt'] = $refundData['IPTVSubTotalRefundAmt'] + $refundData['ISPSubTotalRefundAmt'] + $refundData['AddOnSubTotalRefundAmt'];

            if ($refundData['TotalRefundAmt'] > $refundData['TotalOriginalAmt']) {
                $refundData['TotalRefundAmt'] = $refundData['TotalOriginalAmt'];
            }

            $refundData['TotalRefundAmt'] = number_format($refundData['TotalRefundAmt'],2);
            $refundData['TotalOriginalAmt'] = number_format($refundData['TotalOriginalAmt'],2);
            $refundData['TotalPayableAmt'] = number_format($refundData['TotalPayableAmt'],2);
        }
        //echo "<pre>";print_r($refundData);exit;
        return $refundData;
    }

    public function getActiveServiceFromIds($userServiceIds, $status = 1){

        $query = $this->createQueryBuilder('us')
        ->where('us.id IN(:uServiceId)')
        ->setParameter('uServiceId', $userServiceIds)
        ->andWhere('us.status = :status')
        ->setParameter('status', $status);

        $result = $query->getQuery()->getResult();

        if($result) {

            return $result;
        }

        return false;
    }

   	public function getRefundReportQuery($searchData, $SearchType, $objHelper, $adminServiceLocationPermission) {
   		$data = $this->trim_refund_report_serach_data($searchData, $SearchType);

			$query = $this->createQueryBuilder('us')
		   		->leftJoin('us.purchaseOrder', 'po')
		   		->leftJoin('po.paymentMethod', 'pm')
		   		->leftJoin('us.service', 's')
		   		->leftJoin('us.user', 'u')
		   		->leftJoin('us.refundedBy', 'adm')
          ->leftJoin('u.userServiceLocation', 'sl')
		   		->where('us.purchaseOrder > :purchaseOrder')
		   		->setParameter('purchaseOrder', 0)
		   		->andWhere('us.refund =:refund')
		   		->setParameter('refund', 1)
		   		->andWhere('us.refundedBy >:refundedBy OR us.deActivatedBy >:deActivatedBy ')
		   		->setParameter('refundedBy', 0)
          ->setParameter('deActivatedBy', 0);

   		if ($SearchType == 'ORLIKE') {

   			$likeStr = $objHelper->orLikeSearch($data);
   		}
   		if ($SearchType == 'ANDLIKE') {

   			$likeStr = $objHelper->andLikeSearch($data);
   		}

   		if ($likeStr) {

   			$query->andWhere($likeStr);
   		}
                if(!empty($searchData) && isset($searchData['refundDate']))
                {
                        $RequestDate = explode('~', $searchData['refundDate']);
                        $ReqFrom = trim($RequestDate[0]);
                        $ReqTo = trim($RequestDate[1]);

                        if($ReqFrom != "")
                        {
                            $startDate = new \DateTime($ReqFrom);
                            $query->andWhere('us.refundedAt >= :startdatetime OR us.deActivatedAt >= :startdatetime');
                            $query->setParameter('startdatetime', $startDate->format('Y-m-d 00:00:00'));
                        }
                        if($ReqTo != "") {
                            $endDate = new \DateTime($ReqTo);
                            $query->andWhere('us.refundedAt <= :enddatetime OR us.deActivatedAt <= :enddatetime');
                            $query->setParameter('enddatetime', $endDate->format('Y-m-d 23:59:59'));
                        }
                }
                if($adminServiceLocationPermission != '')
                { 
                    $query->andWhere('sl.id IN (:serviceLocation)');
                    $query->setParameter('serviceLocation', $adminServiceLocationPermission);
                }
   		return $query;
   	}

    public function getRefundReportGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper, $adminServiceLocationPermission = '') {

    	$query = $this->getRefundReportQuery($searchData, $SearchType, $objHelper);

    	$query->orderBy($orderBy, $sortOrder);

    	$countData = count($query->getQuery()->getArrayResult());

    	$query->setMaxResults($limit);
    	$query->setFirstResult($offset);
    	$result = $query->getQuery()->getResult();

    	$dataResult = array();

    	if ($countData > 0) {

    		$dataResult['result'] = $result;
    		$dataResult['totalRecord'] = $countData;

    		return $dataResult;
    	}
    	return false;
    }

    public function getExportDataOfRefund($objHelper, $searchData, $SearchType = 'ANDLIKE', $slot) {

    	$query = $this->getRefundReportQuery($searchData, $SearchType, $objHelper);

        if (!empty($slot)) {
            $query->setMaxResults($slot['limit']);
            $query->setFirstResult($slot['offset']);
        }

        $query->orderBy('po.id', "DESC");

    	$result = $query->getQuery()->getResult();
    	if ($result) {
    		return $result;
    	}
    	return false;
    }

    public function trim_refund_report_serach_data($searchData, $SearchType) {

    	$QueryStr = array();

    	if (!empty($searchData)) {

    		if ($SearchType == 'ANDLIKE') {

    			$i = 0;
    			foreach ($searchData as $key => $val) {

    				if ($key == 'serviceLocation' && !empty($val)) {

                                        $temp = explode(',', $val);
                                        $strcom = '';
                                        foreach($temp as $value){
                                            $userServiceIds = $this->getUserServiceByLocation($value);
                                            $strcom .= (!empty($userServiceIds))?implode("','", $userServiceIds):'';
                                        }
    					$QueryStr[$i]['Field'] = 'us.id';
                                        $QueryStr[$i]['Value'] = $strcom;
    					$QueryStr[$i]['Operator'] = 'IN';
//    					$userServiceIds = $this->getUserServiceByLocation($val);
//    					$QueryStr[$i]['Field'] = 'us.id';
//    					$QueryStr[$i]['Value'] = (!empty($userServiceIds))?implode("','", $userServiceIds):'';
//                                      $QueryStr[$i]['Value'] = $val;
//    					$QueryStr[$i]['Operator'] = 'IN';
    				}

    				if ($key == 'serviceType' && !empty($val)) {

    					$QueryStr[$i]['Field'] = 's.name';
    					$QueryStr[$i]['Value'] = $val;
    					$QueryStr[$i]['Operator'] = '=';
    				}

    				/*if ($key == 'adminUser' && !empty($val)) {

    					$QueryStr[$i]['Field'] = 'adm.username';
    					$QueryStr[$i]['Value'] = $val;
    					$QueryStr[$i]['Operator'] = 'LIKE';
    				}*/
                                if ($key == 'paymentMethod' && !empty($val)) {

    					$QueryStr[$i]['Field'] = 'pm.name';
    					$QueryStr[$i]['Value'] = $val;
    					$QueryStr[$i]['Operator'] = '=';
    				}
                                if ($key == 'userName' && !empty($val)) {

    					$QueryStr[$i]['Field'] = 'u.username';
    					$QueryStr[$i]['Value'] = $val;
    					$QueryStr[$i]['Operator'] = 'LIKE';
    				}
                                if ($key == 'refundType' && !empty($val)) {

    					$QueryStr[$i]['Field'] = 'sp.payment_status';
    					$QueryStr[$i]['Value'] = $val;
    					$QueryStr[$i]['Operator'] = '=';
    				}
    				$i++;
    			}
    		} else {

    		}
    	}
    	return $QueryStr;
    }

    public function getUserServiceByLocation($locationName) {

    	$userServiceIds = array();

    	$objServiceLocation = $this->_em->getRepository('DhiAdminBundle:ServiceLocation')->getPackageServiceLocation($locationName);

    	if ($objServiceLocation) {

    		$objIpAddressZones = $objServiceLocation->getIpAddressZones();

    		if ($objIpAddressZones) {

    			foreach ($objIpAddressZones as $ipAddressZone) {

    				$fromIpToLong = $ipAddressZone->getFromIpAddressLong();
    				$toIpToLong   = $ipAddressZone->getToIpAddressLong();


    				$qb = $this->createQueryBuilder('us')
			    				->select('us')
			    				->where('us.serviceLocationIp >=:fromIP')
			    				->setParameter('fromIP', $fromIpToLong)
			    				->andWhere('us.serviceLocationIp <=:toIP')
			    				->setParameter('toIP', $toIpToLong)
			    				->andWhere('us.refund =:refund')
			    				->setParameter('refund', 1)
			    				->andWhere('us.refundedBy >:refundedBy')
			    				->setParameter('refundedBy', 0);

    				$userServicesByLocation = $qb->getQuery()->getResult();

    				if ($userServicesByLocation) {

    					foreach ($userServicesByLocation as $userServices) {

    						$userServiceIds[] = $userServices->getId();
    					}
    				}
    			}
    		}
    	}

    	if (!empty($userServiceIds)) {

    		return $userServiceIds;
    	}

    	return false;
    }

    public function getWithoutMacActiveIPTVService(){

    	$nowDateTime = new \DateTime();
    	//$nowDateTime->modify('-72 HOURS');

    	$query = $this->createQueryBuilder('us')
	    	->leftJoin('us.user', 'u')
	    	->leftJoin('u.userMacAddress', 'um')
	    	->leftJoin('us.service', 's')
	    	->where('us.activationDate <= :activationDate')
	    	->setParameter('activationDate', $nowDateTime)
	    	->andWhere('UPPER(s.name) =:serviceName')
	    	->setParameter('serviceName', strtoupper('IPTV'))
	    	->andWhere('us.status = :status')
	    	->setParameter('status', 1)
    		->andWhere('um.id IS NULL');

	    $result = $query->getQuery()->getResult();

    	if($result) {

    		return $result;
    	}

    	return false;
    }

    public function getActiveByServiceLocation($fromIpAddress,$toIpAddress,$service,$paymentMethodName,$packageName,$searchData){
        $paymentStatus = array('Completed', 'Refunded');

		$query = $this->createQueryBuilder('us')
				->select('pm.name as paymentMethod, s.name as serviceName', 'sp.purchase_type')
				->addSelect('SUM(sp.payableAmount) as totalAmount')
				->leftJoin('us.service', 's')
				->leftJoin('us.servicePurchase', 'sp')
				->leftJoin('us.purchaseOrder', 'po')
				->leftJoin('po.paymentMethod', 'pm')
				->andWhere('us.serviceLocationIp >= :fromIp')
				->setParameter('fromIp', $fromIpAddress)
				->andWhere('us.serviceLocationIp <= :toIp')
				->setParameter('toIp', $toIpAddress)
				->andWhere('pm.showInSalesReport = :showInSalesReport')
				->setParameter('showInSalesReport', 1)
        		->andWhere('sp.paymentStatus IN (:ppaystatus)')
				->setParameter('ppaystatus', $paymentStatus)
				->andWhere('po.paymentStatus IN (:postatus)')
				->setParameter('postatus', $paymentStatus)
				->groupBy('s.id')
				->addGroupBy('pm.id')->addGroupBy('sp.purchase_type');

		if(!empty($service)){
			if (strtoupper($service) == "TVOD") {
                $query->andWhere('s.name = :service')->setParameter('service',$service);
                $query->andWhere('sp.purchase_type = :isTvod')->setParameter('isTvod' , "TVOD");
            }else if ($service == "BUNDLE") {
                $query->andWhere('sp.purchase_type = :isBundle')->setParameter('isBundle' , "BUNDLE");
            }else{
                $query->andWhere('s.name = :service')->setParameter('service',$service);
                $query->andWhere('sp.purchase_type IS NULL');
            }
		}

		if(!empty($paymentMethodName)){
			$query->andWhere('pm.name = :payment')
					->setParameter('payment',$paymentMethodName);
		}

		if(!empty($packageName)){
			$query->andWhere('sp.packageId = :package OR sp.bundle_id = :bundle')->setParameter('package',$packageName)->setParameter('bundle',$packageName);
		}

		if(!empty($searchData['serviceType'])){

			$RequestDate = explode('~', $searchData['serviceType']);
				$ReqFrom = trim($RequestDate[0]);
				$ReqTo = trim($RequestDate[1]);

				if ($ReqFrom != "") {
					$startDate = new \DateTime($ReqFrom);
					$query->andWhere('po.createdAt >= :today_startdatetime');
					$query->setParameter('today_startdatetime', $startDate->format('Y-m-d 00:00:00'));
				}
				if ($ReqTo != "") {
					$endDate = new \DateTime($ReqTo);
					$query->andWhere('po.createdAt <= :today_enddatetime');
					$query->setParameter('today_enddatetime', $endDate->format('Y-m-d 23:59:59'));

			}
		}

		$result = $query->getQuery()->getArrayResult();
		//print_r($result);exit;

		return $result;

	}
        
   public function getPaymentChartData($fromIpAddress,$toIpAddress,$month){

		// $paymentMethod = array('PayPal','CreditCard','Milstar','Cash','EagleCash');

		date_default_timezone_set('Asia/Calcutta');
		$previousMonthDate = date('Y-m-d 00:00:00', strtotime('first day of last month'));
		$lastMonthDate = date('Y-m-d 23:59:59', strtotime('last day of last month'));

		$query = $this->createQueryBuilder('us')
				->select('pm.name as paymentMethod, s.name as serviceName')
				->addSelect('SUM(sp.payableAmount) as totalAmount')
				->leftJoin('us.service', 's')
				->leftJoin('us.servicePurchase', 'sp')
				->leftJoin('us.purchaseOrder', 'po')
				->leftJoin('po.paymentMethod', 'pm')
				->andWhere('us.serviceLocationIp >= :fromIp')
				->setParameter('fromIp', $fromIpAddress)
				->andWhere('us.serviceLocationIp <= :toIp')
				->setParameter('toIp', $toIpAddress)
				->andWhere('pm.showInSalesReport = :showInSalesReport')
                ->setParameter('showInSalesReport', 1)
                // ->andWhere('pm.code IN(:paymentMethod)')
				// ->setParameter('paymentMethod', $paymentMethod)
				->andWhere('sp.paymentStatus = :ppaystatus')
				->setParameter('ppaystatus', 'Completed')
				->andWhere('po.paymentStatus = :postatus')
				->setParameter('postatus', 'Completed')
				//->groupBy('s.id')
				->addGroupBy('pm.id');

		if($month == 1){
			$query->andWhere('po.createdAt >= :today_startdatetime');
			$query->setParameter('today_startdatetime', $previousMonthDate);
			$query->andWhere('po.createdAt <= :today_enddatetime');
			$query->setParameter('today_enddatetime',$lastMonthDate);

		}

		$result = $query->getQuery()->getArrayResult();

		return $result;
	}

	 public function getUserExpiredPackage($userId) {

        $date = new \DateTime();

        $qb = $this->createQueryBuilder('us')->select('us')
				->select('us','sp.purchase_type','s.name','sp.bundleApplied')
				->leftJoin('us.servicePurchase','sp')
				->leftJoin('sp.purchaseOrder','po')
				->leftJoin('us.service','s')
				->where('us.status = :status')
				->setParameter('status', 1)
				->andWhere('us.isAddon = :addon')
				->setParameter('addon', 0)
				->andWhere('us.user = :users')
				->setParameter('users', $userId);

        $expiredData = $qb->getQuery()->getResult();
		$count = 0;
		$isPurchaseType = '';
		$service = array('IPTV','ISP');
		foreach($expiredData as $package){

			if(in_array($package['name'],$service)){
				$isPurchaseType = $package['purchase_type'];
				if($package[0]->getExpiryDate()->format('Y-m-d H:i:s') <= $date->format('Y-m-d H:i:s')){
					$count++;
				}

			}
		}

		if($isPurchaseType == 'BUNDLE'){
			if($count == 2){
				return 1 ;
			} else {
				return 0 ;
			}
		} else {
			if($count == 1){
				return 1 ;
			} else {
				return 0 ;
			}
		}

        return 0;
    }

	 public function getUserExpiredPackageService($userId) {

        $date = new \DateTime();

        $qb = $this->createQueryBuilder('us')
				->select('us','sp.purchase_type','s.name','sp.bundleApplied')
				->leftJoin('us.servicePurchase','sp')
				->leftJoin('sp.purchaseOrder','po')
				->leftJoin('us.service','s')
				->where('us.expiryDate <= :expiryDate')
				->setParameter('expiryDate', $date->format('Y-m-d H:i:s'))
				->andWhere('us.status = :status')
				->setParameter('status', 1)
				->andWhere('us.user = :users')
				->setParameter('users', $userId);

        $expiredData = $qb->getQuery()->getArrayResult();

        if($expiredData) {

            return $expiredData;
        }

        return 0;
    }

    public function getPlansByPackageId($packages = array(), $service, $isServiceActive = false) {
        $query = $this->createQueryBuilder('us')
                ->select('us')
                ->where("us.packageId IN (:packages)")
                ->setParameter("packages", $packages)
                ->andWhere("us.service  = :service")
                ->setParameter("service", $service);

        if($isServiceActive) {
            $query->andWhere('us.status = 1');
        }

        $plans = $query->getQuery()->getResult();
        if($plans) {
            return $plans;
        }
        return 0;
    }

    public function getDeactivatedCount($locationId, $partnerId, $createdBy, $dates = '', $packageId  = '', $type = 'summary'){

        $query = $this->createQueryBuilder('us')
                ->innerJoin('us.servicePurchase', 'sp')
                ->innerJoin('sp.discountedPartnerPromocode', 'ppc')
                ->innerJoin('DhiAdminBundle:Package','pck','with','ppc.packageId = pck.packageId')
                ->innerJoin('ppc.serviceLocations', 'sl')
                ->innerJoin('ppc.batchId', 'pcb')
                ->innerJoin('pcb.partner', 'p')
                ->where('sl.id = :serviceLocationId')
                ->setParameter('serviceLocationId', $locationId)
                ->andWhere('p.id = :partnerId')
                ->setParameter('partnerId', $partnerId)
                ->andWhere('us.deActivatedAt IS NOT NULL')
                ->orderBy('pck.packageId', 'ASC');


            if($type == 'summary'){
                $query->select('us.packageId','pck.packageName', 'count(us.deActivatedAt) as totalDeactivated')
                    ->having('totalDeactivated > :totalDeactivated')
                    ->setParameter('totalDeactivated', 0)
                    ->groupBy('pck.packageId','pck.packageName');
            }

            if($type == 'details'){
                $query->select('pck.packageName', 'u.username', 'us.activationDate', 'us.deActivatedAt', 'spat.name AS partnerName')
                    ->innerJoin('us.deActivatedBy', 'spat')
                    ->innerJoin('us.user', 'u')
                    ->andWhere('us.packageId = :packageId')
                    ->setParameter('packageId', $packageId)
                    ->orderBy('us.deActivatedAt','DESC');
            }

            if (!empty($dates)){
                $RequestDate = explode('~', $dates);
                $ReqFrom = trim($RequestDate[0]);
                $ReqTo = trim($RequestDate[1]);

                if ($ReqFrom != "") {
                    $startDate = new \DateTime($ReqFrom);
                    $query->andWhere('us.deActivatedAt >= :fromDeActivatedAt')->setParameter('fromDeActivatedAt', $startDate->format('Y-m-d 00:00:00'));
                }
                if ($ReqTo != "") {
                    $endDate = new \DateTime($ReqTo);
                    $query->andWhere('us.deActivatedAt <= :toDeActivatedAt')->setParameter('toDeActivatedAt', $endDate->format('Y-m-d 23:59:59'));
                }
            }
            if(!empty($createdBy)){
                $query->andWhere('ppc.createdBy = :createdBy')->setParameter('createdBy', $createdBy);
            }

        $result = $query->getQuery()->getArrayResult();

        return $result;
    }

    public function getActiveUserServiceList($serviceLocation, $serviceType, $toExpiryDate) {

        $query = $this->createQueryBuilder('us')
               ->select('us.id', 'us.packageName', 'us.packageId', 's.name', 'count(us.id)')
                ->leftJoin('us.servicePurchase', 'sp')
                ->leftJoin('sp.service_location_id', 'sl')
                ->leftJoin('us.service', 's')
                ->leftJoin('DhiAdminBundle:Package', 'p', 'with', 'us.packageId = p.packageId')
                ->groupBy('us.packageId')
                ->andWhere('sl.name = :serviceLocation')
                ->setParameter('serviceLocation', $serviceLocation);
        
            if(!empty($serviceType)){
                $query->andWhere('s.name IN (:serviceType)')
                       ->setParameter('serviceType', $serviceType);
            }

            if(!empty($toExpiryDate) && $toExpiryDate != ''){
                $toDate = new \DateTime($toExpiryDate);
            }else{
                $toDate = new \DateTime();
            }

        $query->andWhere('us.expiryDate > :toDate AND us.refund != 1')
                ->orWhere('us.refundedAt > :toRefundDate AND us.refund = 1')
                ->setParameter('toDate',$toDate->format('Y-m-d 00:00:00') )
                ->setParameter('toRefundDate',$toDate->format('Y-m-d 00:00:00') );
        
        $result     = $query->getQuery()->getArrayResult();
        $countData  = count($result);
        $dataResult = array();
        if ($countData > 0) {
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
            return $dataResult;
        }
        return false;
    }

    public function countTotalActiveServiceList($user){
            $query = $this->createQueryBuilder('us')
                    ->where('us.user = :user')
                    ->setParameter('user', $user)
                    ->andWhere('us.status = :status')
                    ->setParameter('status', 1);
            $result = $query->getQuery()->getArrayResult();
            $count = count($result);
            return $count;
    }

    public function getPoUserServce($poId){
        $query = $this->createQueryBuilder('us')
            ->select('sp.id as servicePurchaseId', 'us.activationDate', 'us.expiryDate', 'sp.packageName', 'sp.actualAmount', 'sp.payableAmount', 'sp.paymentStatus', 'sp.id as id', 'sp.rechargeStatus', 's.name as service', "sp.isCompensation", 'sp.isAddon', 'sp.isCredit', 'c.credit', 'spl.name as serviceLocationId')
            ->leftJoin("us.service", "s")
            ->leftJoin("us.servicePurchase", "sp")
            ->leftJoin("sp.service_location_id", "spl")
            ->leftjoin("sp.credit", 'c')
            ->where('us.purchaseOrder = :purchaseOrder')
            ->setParameter('purchaseOrder', $poId);
        $result = $query->getQuery()->getArrayResult();
        if(count($result) > 0){
            return $result;
        }
        return false;   
    }

    public function getServiceUsers($services){
        $query = $this->createQueryBuilder('us', 'u')
            ->innerJoin("us.service", "s")
            ->innerJoin("us.user", "u")
            ->where('us.status = :status')
            ->setParameter('status', 1)
            ->andWhere('s.name IN (:services)')
            ->setParameter('services', $services);

        $result = $query->getQuery()->getResult();
        return $result;   
    }

    public function getNumberOfTotalPlans($serviceLocations, $serviceNameArr, $createdAt) {

        $queryServiceName = $this->createQueryBuilder('us')
            ->select('count(us.id)')
            ->innerJoin('us.service', 's')
            ->innerJoin('us.user', 'u')
            ->innerJoin('us.servicePurchase', 'sp')
            ->innerJoin('sp.service_location_id','sl')
            ->where('us.status = :status')
            ->setParameter('status', 1)
            ->andWhere('us.isAddon = :is_addon')
            ->setParameter('is_addon', 0)
            ->andWhere('us.expiryDate > :expiry_date')
            ->setParameter('expiry_date', new \DateTime('now'))
            ->andWhere('us.createdAt < :created_at')
            ->setParameter('created_at', $createdAt)
            ->andWhere('us.isPlanActive = :isPlanActive')
            ->setParameter('isPlanActive', 1);

        if(count($serviceNameArr) > 1) {
            $queryServiceName->andWhere('s.name IN (:servicename)')->setParameter('servicename', $serviceNameArr);
        } else {
            $queryServiceName->andWhere('s.name = :servicename OR sp.purchase_type = :purchase_type')
                ->setParameter('servicename', $serviceNameArr[0])
                ->setParameter('purchase_type', "BUNDLE");
        }

        if (!empty($serviceLocations)) {
            $queryServiceName->andWhere('u.locked = :locked')
                ->setParameter('locked', 0)
                ->andWhere('u.isDeleted = :deleted')
                ->setParameter('deleted', 0)
                ->andWhere('u.roles LIKE :role')
                ->setParameter('role', '%ROLE_USER%');

            $cond = '';

            foreach ($serviceLocations as $serviceLocation) {
                $cond .= '(sl.id = ' . $serviceLocation->getId() . ') OR ';
            }
            $cond = rtrim($cond, ' OR ');
            $queryServiceName->andWhere($cond);

        }

        $serviceResult = $queryServiceName->getQuery()->getSingleScalarResult();

        return $serviceResult;
    }
    
    public function getExpiredPlans($userId) {
        $services = array();
       
        $qb = $this->createQueryBuilder('us')
            ->select('us.id', 'us.bandwidth', 'us.isPlanActive', 'us.expiryDate', 'po.id as purchaseOrderId')
            ->innerJoin('us.purchaseOrder', 'po')
            ->where('us.user = :userId')
            ->setParameter('userId', $userId)
            // ->andWhere('us.isPlanActive = :isplanactive')
            // ->setParameter('isplanactive', 1)
            ->andWhere('us.status = :status')
            ->setParameter('status', 0)
            ->andWhere('us.isExpired = :isexpired')
            ->setParameter('isexpired', 0)
            ->andWhere('us.refund = :refund')
            ->setParameter('refund', 0)
            ->orderby('us.id', 'DESC');

        $result = $qb->getQuery()->getArrayResult();

        return $result;
    }
    public function trimSerachDataForExpiredPlans($searchData, $SearchType){

        $QueryStr = array();
        if (!empty($searchData)) {
            if ($SearchType == 'ANDLIKE') {
                $i = 0;
                foreach ($searchData as $key => $val) {
                    if ($key == 'PackageName' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'us.package_name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    
                    }
                    $i++;
                }
            } else {

            }
        }
        return $QueryStr;
    }

    public function getExpiredPlansForRefund($serviceTypeArr, $userServiceId){

        $userServiceIds = explode(',', $userServiceId);

        $query = $this->createQueryBuilder('us')
            // ->select('po.id', 'us.isExtend', 'sp.isUpgrade', 'us.packageName', 'us.validity', 'sp.actualAmount', 'us.payableAmount', 'us.expiryDate', 's.name as service', 'sl.name as serviceLocation', 'us.activationDate', 'us.isAddon')
            ->innerJoin('us.servicePurchase', 'sp')
            ->innerJoin('us.user', 'u')
            ->innerJoin('us.service', 's')
            ->innerJoin('us.purchaseOrder', 'po')
            ->leftJoin('sp.service_location_id', 'sl')
            ->where('sp.paymentStatus IN (:paymentStatus)')
            ->setParameter('paymentStatus', array('Completed', 'Expired'))
            ->andWhere('us.status = :status')
            ->setParameter('status', 0)
            ->andWhere('us.refund = :refund')
            ->setParameter('refund', 0)
            ->andWhere('s.name IN (:services)')
            ->setParameter('services', $serviceTypeArr)
            ->andWhere('us.id IN (:userServiceId)')
            ->setParameter('userServiceId', $userServiceIds)
            ->orderby('us.id', 'DESC');

        $result = $query->getQuery()->getResult();
        $refundData = $this->activeServiceList($result, 'expired');
        return $refundData;
    }

    public function isRefundedorExtendedPlan($userServiceId, $userId, $purchaseOrderId){
        $query = $this->createQueryBuilder('us')
            ->select('CASE WHEN us.isExtend = 1 OR sp.isUpgrade = 1 THEN 0 ELSE 1 END as flag')
            ->innerJoin('us.servicePurchase', 'sp')
            ->innerJoin('us.user', 'u')
            ->where('us.id > :uServiceId')
            ->setParameter('uServiceId', $userServiceId)
            ->andWhere('u.id = :userId')
            ->setParameter('userId', $userId)
            ->andWhere('us.purchaseOrder != :purchaseOrderId')
            ->setParameter('purchaseOrderId', $purchaseOrderId)
            ->setMaxResults(1)
            ->setFirstResult(0)
            ->orderby('us.id', 'ASC');

        $result = $query->getQuery()->getArrayResult();
        $flag = 1;
        if (!empty($result[0])) {
            $flag = $result[0]['flag'];
        }
        return $flag;
    }

    public function checkUserEligibleFreeRechargeCard($arrParams = array()){

        if(!empty($arrParams)){
            $firstDate = date('Y-m-01 00:00:00');
            $lastDate  = date('Y-m-t 23:59:59');

            $query = $this->createQueryBuilder('us')
                    ->select('us.id as userServiceId','u.id as userId', 'us.packageId')
                    ->innerJoin('us.user', 'u')
                    ->innerJoin('us.purchaseOrder', 'po')
                    ->where('u.username = :usernameOrEmail OR u.email = :usernameOrEmail')
                    ->setParameter('usernameOrEmail', $arrParams['usernameOrEmail'])
                    ->andWhere('po.paymentStatus NOT IN (:paymentStatus)')
                    ->setParameter('paymentStatus', array('InProcess','PartiallyCompleted', 'Failed', 'Voided'))
                    ->andWhere('us.createdAt >= :firstDate')
                    ->setParameter('firstDate', $firstDate)
                    ->andWhere('us.createdAt <= :lastDate')
                    ->setParameter('lastDate', $lastDate)
                    ->andWhere('us.packageId IN (:packageid)')
                    ->setParameter('packageid', $arrParams['freeRechargeCardPackege'])
                    ->andWhere('u.locked = :locked')
                    ->setParameter('locked', 0)
                    ->andWhere('u.isDeleted = :deleted')
                    ->setParameter('deleted', 0)
                    ->andWhere('u.roles LIKE :role')
                    ->setParameter('role', '%ROLE_USER%')
                    ->orderBy('us.createdAt', 'ASC');
            $result = $query->getQuery()->getArrayResult();
            if(count($result) > 0){
                return $result;
            }
        }
        return false;
    }
}