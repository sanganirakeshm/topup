<?php
namespace Dhi\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TikilivePromoCodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TikilivePromoCodeRepository extends EntityRepository
{
	public function getPromoCodeGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper){
            $data = $this->trim_serach_data($searchData, $SearchType);

	    $query = $this->createQueryBuilder('tc')
            ->select('tc.id', 'tc.promoCode','tc.batchName','tc.planName','tc.createdAt', 'tc.createdBy', 'tc.status', 'tc.displayDate', 'tc.redeemedDate', 'tc.isRedeemed', 'u.username', 'u.id as uId', 'sp.packageName')
            ->leftJoin('tc.redeemedBy', 'u')
            ->leftJoin('DhiServiceBundle:PurchaseOrder', 'po', "with", "tc.purchaseId = po.id")
            ->leftJoin('po.servicePurchases', 'sp')
            ->orderBy('tc.id', 'desc');
		
	if ($SearchType == 'ORLIKE') {
            $likeStr = $objHelper->orLikeSearch($data);
        }else if ($SearchType == 'ANDLIKE') {
            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {
            $query->andWhere($likeStr);
        }

        
        $countQuery = clone $query;
        $countQuery->select("count(tc.id) as totalRecords");
        $countData = $countQuery->getQuery()->getSingleScalarResult();

        $query->orderBy($orderBy, $sortOrder);
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);
        $result = $query->getQuery()->getArrayResult();

        $dataResult = array();
        if ($countData > 0) {
			$dataResult['result']      = $result;
			$dataResult['totalRecord'] = $countData;
           	return $dataResult;
        }
        return false;

    }

    public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();
       
              
        if (!empty($searchData)) {
            
             if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {
                    if($key == 'promoCode' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'tc.promoCode';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }else if($key == 'planName' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'tc.planName';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }else if($key == 'isRedeemed' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'tc.isRedeemed';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }else if($key == 'status' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'tc.status';
                        $QueryStr[$i]['Value'] = ($val == 'Enabled' ? 1 : 0);
                        $QueryStr[$i]['Operator'] = '=';
                     }else if($key == 'redeemedBy' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'u.username';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }else if($key == 'createdBy' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'tc.createdBy';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }else if($key == 'batchName' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'tc.batchName';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }else if($key == 'redeemedDate' && !empty($val)) {
                        
                        $RequestDate = explode('~', $val);
                        $ReqFrom = trim($RequestDate[0]);
                        $ReqTo = trim($RequestDate[1]);

                        if ($ReqFrom != "") {
                            $startDate = new \DateTime($ReqFrom);

                            $QueryStr[$i]['Field'] = 'tc.redeemedDate';
                            $QueryStr[$i]['Value'] = $startDate->format('Y-m-d 00:00:00');
                            $QueryStr[$i]['Operator'] = '>=';
                        }
                        if ($ReqTo != "") {
                            if ($ReqFrom != "") {
                                $i++;
                            }
                            $endDate = new \DateTime($ReqTo);
                            $QueryStr[$i]['Field'] = 'tc.redeemedDate';
                            $QueryStr[$i]['Value'] = $endDate->format('Y-m-d 23:59:59');
                            $QueryStr[$i]['Operator'] = '<=';
                        }
                    }else if($key == 'packageName' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'sp.packageName';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    $i++;
                }
            } else {
                
            }
        }
        return $QueryStr;
    }
       
    public function getunusedtikilivepromocodes(){

        $currentDate = new \DateTime();
        $query = $this->createQueryBuilder('tc')
                 ->select("count(tc.id) as totalRecords");
        $query->where("tc.isRedeemed = 'No'");
        $query->andWhere("tc.status = 1");
        $countData = $query->getQuery()->getSingleScalarResult();
        return $countData;
    }
    
    
    public function getTikilivePromocode($packageId){
        $currentDate = new \DateTime();
        
        $query = $this->createQueryBuilder('tc')
            ->select("tc.promoCode", 'tc.id', 'tc.planName')
            ->innerJoin("DhiAdminBundle:PackageWiseTikiLivePlan", 'ptp', 'with', 'tc.planName = ptp.tikiLivePlanName')

            ->where("tc.isRedeemed = :isRedeemed")
            ->setParameter("isRedeemed", 'No')

            ->andWhere("tc.status = :status")
            ->setParameter("status", 1)

            ->andWhere("ptp.packageId = :packageId")
            ->setParameter("packageId", $packageId)

            ->orderBy('tc.id', 'asc')
            ->setMaxResults(1)
            ->setFirstResult(0);

        $result = $query->getQuery()->getArrayResult();
        return $result ;
    }
    
    public function getDistinctTikiLivePlan(){
        $query = $this->createQueryBuilder('tl')
                ->select('DISTINCT tl.planName')
                ->where('tl.planName IS NOT NULL')
                ->andWhere('tl.planName != :planname')
                ->setParameter('planname', '')
                ->orderBy('tl.planName', 'ASC');
        $result = $query->getQuery()->getResult();
        if($result){
            return $result;
        }
        return false;
    }
    
    public function getExportDataOfTikliveePromocodes($objHelper, $searchData,$SearchType){
       
        $data = $this->trim_serach_data($searchData['search_data'], $SearchType);
        
        $query = $this->createQueryBuilder('tc')
            ->select('tc.id', 'tc.promoCode','tc.batchName','tc.planName','tc.createdAt', 'tc.createdBy', 'tc.status', 'tc.displayDate', 'tc.redeemedDate', 'tc.isRedeemed', 'u.username', 'u.id as uId', 'sp.packageName')
            ->leftJoin('tc.redeemedBy', 'u')
            ->leftJoin('DhiServiceBundle:PurchaseOrder', 'po', "with", "tc.purchaseId = po.id")
            ->leftJoin('po.servicePurchases', 'sp')
            ->orderBy('tc.id', 'desc');

        if ($SearchType == 'ORLIKE') {
            $likeStr = $objHelper->orLikeSearch($data);
        }else if ($SearchType == 'ANDLIKE') {
            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {
            $query->andWhere($likeStr);
        }

        $result = $query->getQuery()->getArrayResult();
        
        return $result;
    }
    
}