<?php

namespace Dhi\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SetTopBoxRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SetTopBoxRepository extends EntityRepository
{
     
    //Added for Gridlist
    public function getSetTopBoxGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper) {
        
        $data = $this->trim_serach_data($searchData, $SearchType);
        
        $query = $this->createQueryBuilder('st')
                ->select('st')
				//->LeftJoin('st.user', 'u')
                ->orderBy('st.id', 'desc');
               
                 

        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {

            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);
       
        $countData = count($query->getQuery()->getArrayResult());
           
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);
       
        $result = $query->getQuery()->getArrayResult();
        
        $dataResult = array();
       
        if ($countData > 0) {
            
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
           
            return $dataResult;
        }
        return false;
    }
    
     public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {
                    
                     if ($key == 'MacAddress' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'st.macAddress';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    if ($key == 'GivenBy' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'st.givenBy';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    
                     if ($key == 'ReceivedBy' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'st.receivedBy';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }                                   
                    $i++;
                }
            } else {
                
            }
        }
        return $QueryStr;
    }
	
	 public function checkMacAddressExist($id) {
        
       // $data = $this->trim_serach_data($searchData, $SearchType);
        
        $query = $this->createQueryBuilder('st')
                ->select('st')
				 ->where('st.status = :status')
				->setParameter('status', 1);
				
				if($id) {
			
		$query ->andwhere('st.id NOT IN(:Id)')
				->setParameter('Id', $id);
		}
				
				//->LeftJoin('st.user', 'u')
         //$query  ->orderBy('st.id','desc');
		
		
		
		$result = $query->getQuery()->getArrayResult();
		
		
		return $result ;
	
	 }
}
