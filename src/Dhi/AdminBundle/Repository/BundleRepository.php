<?php

namespace Dhi\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BundleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BundleRepository extends EntityRepository
{

	public function getAllBundle($serviceLocationId,$activeService,$isDeersAuthenticated = 0, $cartService, $isEmployee = 0){
		$qb = $this->createQueryBuilder('b')
			->select('b')
			->leftJoin('b.iptv', 'p')
			->where('p.serviceLocation = :serviceLocation')
			->setParameter('serviceLocation', $serviceLocationId)
			->OrderBy('p.amount', 'ASC');

		if($isEmployee == 1){
                    $qb->andWhere('b.isEmployee = :isEmployee')->setParameter('isEmployee', $isEmployee);
                }

		$resultPackages = $qb->getQuery()->getResult();
		$bundleArr = $packageArr = $iptvArr = $ispArr = array();
		$maxIptvCount = 0;
		$ISPPackage = false;

		if($resultPackages){

			foreach($resultPackages as $key => $bundle){
				$package = $bundle->getIsp();
				$ISPPackage = false;
				$ispPlanAvain = $BundlePackage = true;
				if($package->getServiceLocation()->getId() != $serviceLocationId){
					continue;
				}

				// For Bundle price comperation
				if($activeService['ISP'] && $activeService['IPTV']){
					if(!empty($activeService['ISP']['bundle'])){
						$activeBundle = $this->findOneBy(array('bundle_id'=>$activeService['ISP']['bundle']));
						if ($activeBundle !== null) {
							$bundleAmount = $activeBundle->getAmount();
							if($bundle->getAmount() <= $bundleAmount){
								$BundlePackage = false;
							}
						}
					}
				}

				if($activeService['ISP'] && empty($activeService['IPTV'])){
					if($package->getBandWidth() >= $activeService['ISP']['bandwidth'] && $package->getValidity() >= $activeService['ISP']['actualValidity'] && $bundle->getAmount() >= $activeService['ISP']['amount']){
						$ISPPackage = true;
					}

				}else{
					$ISPPackage = true;
				}
				$ispId = $package->getId();
				$iArr = array();
				if($ISPPackage && $BundlePackage){
					$iArr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),// . ' - '. $package->getBandwidth() . 'k - ' . $package->getValidity() .' days',
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
                                                //'iptvId' => $bundle->getIptv()->getId(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
						'isCheckDeersAuthentication' => 0,
						"isActive" => 1
					);
				}else{
					$iArr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),// . ' - '. $package->getBandwidth() . 'k - ' . $package->getValidity() .' days',
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
                                                //'iptvId' => $bundle->getIptv()->getId(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
						'isCheckDeersAuthentication' => 0,
						"isActive" => 0
					);
					$ispPlanAvain = false;
				}
				
				$IPTVPackage = false;
				$package = $bundle->getIptv();
				if($package->getServiceLocation()->getId() != $serviceLocationId){
					continue;
				}

				if($activeService['IPTV'] && empty($activeService['ISP'])){
					if($bundle->getAmount() > $activeService['IPTV']['amount']){

						$IPTVPackage = true;
					}
				}else{
                    $IPTVPackage = true;
                }

                $isCheckDeersAuth = 0;
				if($IPTVPackage && $BundlePackage && $ispPlanAvain == true){

					if ($package->getIsDeers() == 1 && $isDeersAuthenticated == 2) {

						$isCheckDeersAuth = 1;
					}

					$arr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
						'isActive' => 1,
						'isCheckDeersAuthentication' => $isCheckDeersAuth
					);
				}else{
					$arr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
						'isCheckDeersAuthentication' => $isCheckDeersAuth,
						'isActive' => 0
					);
					$IPTVPackage = true;
				}
				

				if(($IPTVPackage && $ISPPackage && $BundlePackage) || $ispPlanAvain == false){

					$bArr = array(
							'Id'                  => $bundle->getId(),
							'packageId'           => 0, //$package->getPackageId(),
							'packageName'         => $bundle->getBundleName(),
							'packagePrice'        => $bundle->getAmount(),
							'totalPackagePrice'   => $bundle->getTotalPackageAmount(),
							'packageChannelCount' => 0, //$package->getTotalChannels(),
							'validity'            => 0, //$package->getValidity(),
							'isDeers'             => 0, //$package->getIsDeers(),
							'description'         => $bundle->getDescription(),
							'discount'            => $bundle->getDiscount(),
							'bundle_id'              => $bundle->getBundleId(),
							//'isAddons'                   => $package->getIsAddons(),
							'isCheckDeersAuthentication' => $isCheckDeersAuth ? $isCheckDeersAuth : 0
						);

					$bundleArr[$bundle->getBundleId()] = $bArr;
					$ispArr[$ispId] =  $iArr;
					$iptvArr[$bundle->getIsp()->getId()][$package->getId()] =  $arr;
					$iptvArr[$bundle->getIsp()->getId()][$package->getId()]['bundle'] = $bundle->getBundleId();

				}

			}
			if(isset($ispId)){
				$ispArr[$ispId]['iptvCount'] = count($iptvArr);
				$maxIptvCount = $maxIptvCount < count($iptvArr) ? count($iptvArr) : $maxIptvCount;
				return array('isp'=>$ispArr, 'iptv'=>$iptvArr, 'maxIptvPlan' => $maxIptvCount, 'bundle' => $bundleArr);
			}else{
				return array('isp'=>array(), 'iptv'=>array(), 'maxIptvPlan' => 0, 'bundle' => array());	
			}
		}else{
			return array('isp'=>array(), 'iptv'=>array(), 'maxIptvPlan' => 0, 'bundle' => array());
		}
	}
        
        
        public function getAllBundleAdmin($serviceLocationId,$activeService,$isDeersAuthenticated = 0, $cartService, $isEmployee = 0){
		$qb = $this->createQueryBuilder('b')
			->select('b')
			->leftJoin('b.iptv', 'p')
                         ->leftJoin('b.isp', 'isp')
                        ->where('p.serviceLocation = :serviceLocation')
			->setParameter('serviceLocation', $serviceLocationId)
                        ->andwhere('p.isPromotionalPlan = 0 OR isp.isPromotionalPlan = 0')
                        ->OrderBy('p.amount', 'ASC');

		if($isEmployee == 1){
                    $qb->andWhere('b.isEmployee = :isEmployee')->setParameter('isEmployee', $isEmployee);
                }

		$resultPackages = $qb->getQuery()->getResult();
		$bundleArr = $packageArr = $iptvArr = $ispArr = array();
		$maxIptvCount = 0;
		$ISPPackage = false;

		if($resultPackages){

			foreach($resultPackages as $key => $bundle){
				$package = $bundle->getIsp();
				$ISPPackage = false;
				$ispPlanAvain = $BundlePackage = true;
				if($package->getServiceLocation()->getId() != $serviceLocationId){
					continue;
				}

				// For Bundle price comperation
				if($activeService['ISP'] && $activeService['IPTV']){
					if(!empty($activeService['ISP']['bundle'])){
						$activeBundle = $this->findOneBy(array('bundle_id'=>$activeService['ISP']['bundle']));
						if ($activeBundle !== null) {
							$bundleAmount = $activeBundle->getAmount();
							if($bundle->getAmount() <= $bundleAmount){
								$BundlePackage = false;
							}
						}
					}
				}

				if($activeService['ISP'] && empty($activeService['IPTV'])){
					if($package->getBandWidth() >= $activeService['ISP']['bandwidth'] && $package->getValidity() >= $activeService['ISP']['actualValidity'] && $bundle->getAmount() >= $activeService['ISP']['amount']){
						$ISPPackage = true;
					}

				}else{
					$ISPPackage = true;
				}
				$ispId = $package->getId();
				$iArr = array();
				if($ISPPackage && $BundlePackage){
					$iArr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),// . ' - '. $package->getBandwidth() . 'k - ' . $package->getValidity() .' days',
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
                                                //'iptvId' => $bundle->getIptv()->getId(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
                                                  'isAutoBundle'        =>$bundle->getIsAutoBundle(),
						'isCheckDeersAuthentication' => 0,
						"isActive" => 1
					);
				}else{
					$iArr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),// . ' - '. $package->getBandwidth() . 'k - ' . $package->getValidity() .' days',
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
                                                //'iptvId' => $bundle->getIptv()->getId(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
                                                 'isAutoBundle'        =>$bundle->getIsAutoBundle(),
						'isCheckDeersAuthentication' => 0,
						"isActive" => 0
					);
					$ispPlanAvain = false;
				}
				
				$IPTVPackage = false;
				$package = $bundle->getIptv();
				if($package->getServiceLocation()->getId() != $serviceLocationId){
					continue;
				}

				if($activeService['IPTV'] && empty($activeService['ISP'])){
					if($bundle->getAmount() > $activeService['IPTV']['amount']){

						$IPTVPackage = true;
					}
				}else{
                    $IPTVPackage = true;
                }

                $isCheckDeersAuth = 0;
				if($IPTVPackage && $BundlePackage && $ispPlanAvain == true){

					if ($package->getIsDeers() == 1 && $isDeersAuthenticated == 2) {

						$isCheckDeersAuth = 1;
					}

					$arr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
                                                  'isAutoBundle'        =>$bundle->getIsAutoBundle(),
						'isActive' => 1,
						'isCheckDeersAuthentication' => $isCheckDeersAuth
					);
				}else{
					$arr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
                                                'isAutoBundle'        =>$bundle->getIsAutoBundle(),
						'isCheckDeersAuthentication' => $isCheckDeersAuth,
						'isActive' => 0
					);
					$IPTVPackage = true;
				}
				

				if(($IPTVPackage && $ISPPackage && $BundlePackage) || $ispPlanAvain == false){

					$bArr = array(
							'Id'                  => $bundle->getId(),
							'packageId'           => 0, //$package->getPackageId(),
							'packageName'         => $bundle->getBundleName(),
							'packagePrice'        => $bundle->getAmount(),
							'totalPackagePrice'   => $bundle->getTotalPackageAmount(),
							'packageChannelCount' => 0, //$package->getTotalChannels(),
							'validity'            => 0, //$package->getValidity(),
							'isDeers'             => 0, //$package->getIsDeers(),
							'description'         => $bundle->getDescription(),
							'discount'            => $bundle->getDiscount(),
							'bundle_id'              => $bundle->getBundleId(),
                                                        'isAutoBundle'        =>$bundle->getIsAutoBundle(),
							//'isAddons'                   => $package->getIsAddons(),
							'isCheckDeersAuthentication' => $isCheckDeersAuth ? $isCheckDeersAuth : 0
						);
                                          //getIsAutoBundle
                                        if($bundle->getIsAutoBundle()==1){
                                            $autobundleArr[$bundle->getBundleId()] = $bArr;
					    $autoispArr[$ispId] =  $iArr;
					    $autoiptvArr[$bundle->getIsp()->getId()][$package->getId()] =  $arr;
					    $autoiptvArr[$bundle->getIsp()->getId()][$package->getId()]['bundle'] = $bundle->getBundleId(); 
                                          
                                        } else {
                                            $bundleArr[$bundle->getBundleId()] = $bArr;
					    $ispArr[$ispId] =  $iArr;
					    $iptvArr[$bundle->getIsp()->getId()][$package->getId()] =  $arr;
					    $iptvArr[$bundle->getIsp()->getId()][$package->getId()]['bundle'] = $bundle->getBundleId();
                                        }
					

				}

			}
                        
			if(isset($ispId)){
				$ispArr[$ispId]['iptvCount'] = count($iptvArr);
				$maxIptvCount = $maxIptvCount < count($iptvArr) ? count($iptvArr) : $maxIptvCount;
				return array('isp'=>$ispArr, 'iptv'=>$iptvArr, 'maxIptvPlan' => $maxIptvCount, 'bundle' => $bundleArr,'autobundleisp'=>@$autoispArr,'autobundleiptv'=>@$autoiptvArr,'autobundleArr'=>@$autobundleArr);
			}else{
				return array('isp'=>array(), 'iptv'=>array(), 'maxIptvPlan' => 0, 'bundle' => array());	
			}
		}else{
			return array('isp'=>array(), 'iptv'=>array(), 'maxIptvPlan' => 0, 'bundle' => array());
		}
	}
        
          public function getAllpromotionalBundleAdmin($serviceLocationId,$activeService,$isDeersAuthenticated = 0, $cartService, $isEmployee = 0){
		$qb = $this->createQueryBuilder('b')
			->select('b')
			->leftJoin('b.iptv', 'p')
                        ->leftJoin('b.isp', 'isp')
			->where('p.serviceLocation = :serviceLocation')
			->setParameter('serviceLocation', $serviceLocationId)
                        ->andwhere('p.isPromotionalPlan = 1 AND isp.isPromotionalPlan = 1')
			->OrderBy('p.amount', 'ASC');

		if($isEmployee == 1){
                    $qb->andWhere('b.isEmployee = :isEmployee')->setParameter('isEmployee', $isEmployee);
                }

		$resultPackages = $qb->getQuery()->getResult();
		$bundleArr = $packageArr = $iptvArr = $ispArr = array();
		$maxIptvCount = 0;
		$ISPPackage = false;

		if($resultPackages){

			foreach($resultPackages as $key => $bundle){
				$package = $bundle->getIsp();
				$ISPPackage = false;
				$ispPlanAvain = $BundlePackage = true;
				if($package->getServiceLocation()->getId() != $serviceLocationId){
					continue;
				}

				// For Bundle price comperation
				if($activeService['ISP'] && $activeService['IPTV']){
					if(!empty($activeService['ISP']['bundle'])){
						$activeBundle = $this->findOneBy(array('bundle_id'=>$activeService['ISP']['bundle']));
						if ($activeBundle !== null) {
							$bundleAmount = $activeBundle->getAmount();
							if($bundle->getAmount() <= $bundleAmount){
								$BundlePackage = false;
							}
						}
					}
				}

				if($activeService['ISP'] && empty($activeService['IPTV'])){
					if($package->getBandWidth() >= $activeService['ISP']['bandwidth'] && $package->getValidity() >= $activeService['ISP']['actualValidity'] && $bundle->getAmount() >= $activeService['ISP']['amount']){
						$ISPPackage = true;
					}

				}else{
					$ISPPackage = true;
				}
				$ispId = $package->getId();
				$iArr = array();
				if($ISPPackage && $BundlePackage){
					$iArr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),// . ' - '. $package->getBandwidth() . 'k - ' . $package->getValidity() .' days',
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
                                                //'iptvId' => $bundle->getIptv()->getId(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
                                                  'isAutoBundle'        =>$bundle->getIsAutoBundle(),
						'isCheckDeersAuthentication' => 0,
						"isActive" => 1
					);
				}else{
					$iArr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),// . ' - '. $package->getBandwidth() . 'k - ' . $package->getValidity() .' days',
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
                                                //'iptvId' => $bundle->getIptv()->getId(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
                                                 'isAutoBundle'        =>$bundle->getIsAutoBundle(),
						'isCheckDeersAuthentication' => 0,
						"isActive" => 0
					);
					$ispPlanAvain = false;
				}
				
				$IPTVPackage = false;
				$package = $bundle->getIptv();
				if($package->getServiceLocation()->getId() != $serviceLocationId){
					continue;
				}

				if($activeService['IPTV'] && empty($activeService['ISP'])){
					if($bundle->getAmount() > $activeService['IPTV']['amount']){

						$IPTVPackage = true;
					}
				}else{
                    $IPTVPackage = true;
                }

                $isCheckDeersAuth = 0;
				if($IPTVPackage && $BundlePackage && $ispPlanAvain == true){

					if ($package->getIsDeers() == 1 && $isDeersAuthenticated == 2) {

						$isCheckDeersAuth = 1;
					}

					$arr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
                                                  'isAutoBundle'        =>$bundle->getIsAutoBundle(),
						'isActive' => 1,
						'isCheckDeersAuthentication' => $isCheckDeersAuth
					);
				}else{
					$arr = array(
						'Id'        => $package->getId(),
						'packageId' => $package->getPackageId(),
						'packageName' => $package->getPackageName(),
						'packagePrice' => $package->getAmount(),
						'packageChannelCount' => $package->getTotalChannels(),
						'validity' => $package->getValidity(),
						'bandwidth' => $package->getBandWidth(),
						'isDeers' => $package->getIsDeers(),
						'description' => $package->getDescription(),
						'isAddons' => $package->getIsAddons(),
                                                'isAutoBundle'        =>$bundle->getIsAutoBundle(),
						'isCheckDeersAuthentication' => $isCheckDeersAuth,
						'isActive' => 0
					);
					$IPTVPackage = true;
				}
				

				if(($IPTVPackage && $ISPPackage && $BundlePackage) || $ispPlanAvain == false){

					$bArr = array(
							'Id'                  => $bundle->getId(),
							'packageId'           => 0, //$package->getPackageId(),
							'packageName'         => $bundle->getBundleName(),
							'packagePrice'        => $bundle->getAmount(),
							'totalPackagePrice'   => $bundle->getTotalPackageAmount(),
							'packageChannelCount' => 0, //$package->getTotalChannels(),
							'validity'            => 0, //$package->getValidity(),
							'isDeers'             => 0, //$package->getIsDeers(),
							'description'         => $bundle->getDescription(),
							'discount'            => $bundle->getDiscount(),
							'bundle_id'              => $bundle->getBundleId(),
                                                        'isAutoBundle'        =>$bundle->getIsAutoBundle(),
							//'isAddons'                   => $package->getIsAddons(),
							'isCheckDeersAuthentication' => $isCheckDeersAuth ? $isCheckDeersAuth : 0
						);
                                        
                                          $bundleArr[$bundle->getBundleId()] = $bArr;
					    $ispArr[$ispId] =  $iArr;
					    $iptvArr[$bundle->getIsp()->getId()][$package->getId()] =  $arr;
					    $iptvArr[$bundle->getIsp()->getId()][$package->getId()]['bundle'] = $bundle->getBundleId();
					

				}

			}
                        
			if(isset($ispId)){
				$ispArr[$ispId]['iptvCount'] = count($iptvArr);
				$maxIptvCount = $maxIptvCount < count($iptvArr) ? count($iptvArr) : $maxIptvCount;
				return array('promoisp'=>$ispArr, 'promoiptv'=>$iptvArr, 'promomaxIptvPlan' => $maxIptvCount, 'promobundle' => $bundleArr);
			}else{
				return array('promoisp'=>array(), 'promoiptv'=>array(), 'promomaxIptvPlan' => 0, 'promobundle' => array());	
			}
		}else{
			return array('promoisp'=>array(), 'promoiptv'=>array(), 'promomaxIptvPlan' => 0, 'promobundle' => array());
		}
	}

	public function getBundleTypeByService($serviceName,$locationId){

		$query = $this->createQueryBuilder('b')
				->leftJoin('b.iptv', 'iptv')
				->leftJoin('b.isp', 'isp');

		if($locationId != null){
			$query->andWhere('iptv.serviceLocation IN( :serviceLocation )')
					->setParameter('serviceLocation', $locationId)
					->andWhere('isp.serviceLocation IN( :serviceLocation )')
					->setParameter('serviceLocation', $locationId);
		}
		$result = $query->getQuery()->getArrayResult();
		return $result;
		
	}

	public function getBundlePlan(){
		$query = $this->createQueryBuilder('b');
		$result = $query->getQuery()->getArrayResult();
		$package = array();
		foreach($result as $key => $value){
		$package[$value['bundle_id']] = $value['description'].' - $'.$value['amount'];
		}

		return $package;
	}

	public function getBundles() {
		$query = $this->createQueryBuilder('b')
				->select('b.bundle_id as packageId', 'b.displayBundleName as packageName', 'b.amount');
		$result = $query->getQuery()->getArrayResult();
		return $result;
	}

    public function getIPTVIds($condition){
        $query = $this->createQueryBuilder('b')
			->select('b.bundle_id', 'b.amount','iptv.packageId', 'iptv.isDeers','iptv.packageName','iptv.id','iptv.description','iptv.totalChannels','b.iptvAmount','GROUP_CONCAT(channel.name) as channelname', 'iptv.isPromotionalPlan')
			->innerJoin('b.iptv', 'iptv')
			->innerJoin('b.regularIsp', 'regularIsp')
			->innerJoin('b.isp', 'isp')
			->leftJoin('iptv.channels', 'channel')
			->where("iptv.serviceLocation = :locationId")
			->setParameter('locationId', $condition['locationId'])
			->andWhere("regularIsp.serviceLocation = :regularIsp_locationId")
			->setParameter('regularIsp_locationId', $condition['locationId'])
			->andWhere("isp.serviceLocation = :isp_locationId")
			->setParameter('isp_locationId', $condition['locationId'])
			->groupBy("b.bundle_id")
			->OrderBy("iptv.isPromotionalPlan", "DESC");

		if (!empty($condition['ISPid'])) {
			$query->andWhere("regularIsp.id = :ISPid")
			->setParameter('ISPid', $condition['ISPid'])
			->orWhere("isp.id = :ispBId")
			->setParameter('ispBId', $condition['ISPid']);
		}

		if (!empty($condition['activeService']['ISP']['amount'])) {
			$query->andWhere("b.amount >= :ispAmount")->setParameter('ispAmount', $condition['activeService']['ISP']['amount']);
		}

		if (!empty($condition['activeService']['ISP']['amount'])) {
			if(!empty($condition['activeService']['ISP']['bundle'])){
				$activeBundle = $this->findOneBy(array('bundle_id' => $condition['activeService']['ISP']['bundle']));
				if ($activeBundle !== null) {
					$bundleAmount = $activeBundle->getAmount();
					$query->andWhere("b.amount >= :bundleAmount")->setParameter('bundleAmount', $bundleAmount);
				}
			}
		}

        $result = $query->getQuery()->getArrayResult();
        return $result;
    }
}
