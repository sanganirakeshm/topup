<?php

namespace Dhi\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ServiceLocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceLocationRepository extends EntityRepository
{

    public function getServiceLocation($packageKeyArr) {

        $qb = $this->createQueryBuilder('sl')
              ->leftJoin('sl.country', 'c');

        $qb->where('sl.name = :sname');
        $qb->setParameter('sname', $packageKeyArr[1]);

        $qb->andWhere('c.name = :cname');
        $qb->setParameter('cname', str_replace(":"," ",$packageKeyArr[0]));

        // return $qb->getQuery()->getOneOrNullResult();
        $records = $qb->getQuery()->getResult();
        if (count($records) > 0) {
            return $records[0];
        }

     }
    public function getServiceLocationAradial($packageKeyArr) {

        $qb = $this->createQueryBuilder('sl')
              ->leftJoin('sl.country', 'c');

        $qb->where('sl.name = :sname');
        $qb->setParameter('sname', $packageKeyArr[1]);


        // return $qb->getQuery()->getOneOrNullResult();
        $records = $qb->getQuery()->getResult();
        if (count($records) > 0) {
            return $records[0];
        }
     }

    public function getAllServiceLocation() {

        $qb = $this->createQueryBuilder('sl')->orderBy('sl.name', 'asc');

        $result = $qb->getQuery()->getArrayResult();

				return $result ;

     }
    public function getActiveUserReportData($searchData, $serviceLocation = '') {
         $query = $this->createQueryBuilder('sl')
                 ->orderBy('sl.id', 'desc');
        if(isset($searchData) && $searchData != null){
            if(isset($searchData['name'])){
                $query->andWhere('sl.name IN (\''.$searchData['name'].'\')');
            }
        }

        if($serviceLocation != '')
        { 
            $query->andWhere('sl.id IN (:serviceLocation)');
            $query->setParameter('serviceLocation', $serviceLocation);
        }

        $result = $query->getQuery()->getArrayResult();
        $countData = count($result);
        if ($countData > 0) {
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }

    public function getActiveUserReportGrid($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper,$fromIp,$toIp, $serviceLocation = '') {

        $data = $this->trim_serach_data($searchData, $SearchType);

        $query = $this->createQueryBuilder('sl')
            ->select('sl.name')
                ->orderBy('sl.id', 'desc');

        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if(isset($fromIp) && $fromIp != ''){

            $query->andWhere('ipadd.fromIpAddress LIKE :fip');
            $query->setParameter('fip', '%'.$fromIp.'%');
        }

        if(isset($toIp) && $toIp != ''){

            $query->andWhere('ipadd.toIpAddress LIKE :toip');
            $query->setParameter('toip', '%'.$toIp.'%');
        }

        if ($likeStr) {
            $query->andWhere($likeStr);
        }

        if($serviceLocation!= '')
        { 
            $query->andWhere('sl.id IN (:serviceLocation)');
            $query->setParameter('serviceLocation', $serviceLocation);
        }
        
        $query->orderBy($orderBy, $sortOrder);

        $result = $query->getQuery()->getResult();
        $countData = count($result);

        $dataResult = array();

        if ($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }

    public function getActiveEmployePromCodeReportGrid($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper,$fromIp,$toIp) {

            $data = $this->trim_serach_data($searchData, $SearchType);

        $query = $this->createQueryBuilder('sl')
                ->orderBy('sl.id', 'desc');
        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {
            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);

        $countData = count($query->getQuery()->getArrayResult());

        $query->setMaxResults($limit);
        $query->setFirstResult($offset);

        $result = $query->getQuery()->getResult();

        $dataResult = array();

        if ($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }

    public function getServiceLocationGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper,$fromIp,$toIp,$serviceLocation  = '') {

        $data = $this->trim_serach_data($searchData, $SearchType);

        $query = $this->createQueryBuilder('sl')
                ->leftJoin('sl.country', 'c')
                ->leftJoin('sl.ipAddressZones', 'ipadd')
                ->orderBy('sl.id', 'desc');


        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if(isset($fromIp) && $fromIp != ''){

            $query->andWhere('ipadd.fromIpAddress LIKE :fip');
            $query->setParameter('fip', '%'.$fromIp.'%');
        }

        if(isset($toIp) && $toIp != ''){

            $query->andWhere('ipadd.toIpAddress LIKE :toip');
            $query->setParameter('toip', '%'.$toIp.'%');
        }

        if ($likeStr) {
            $query->andWhere($likeStr);
        }
        
        if($serviceLocation!= '')
        { 
            $query->andWhere('sl.id IN (:serviceLocation)');
            $query->setParameter('serviceLocation', $serviceLocation);
        }

        $query->orderBy($orderBy, $sortOrder);

        $countData = count($query->getQuery()->getArrayResult());

        $query->setMaxResults($limit);
        $query->setFirstResult($offset);

        $result = $query->getQuery()->getResult();

        $dataResult = array();

        if ($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }

     public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {

                     if ($key == 'Country' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'c.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    if ($key == 'Name' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'sl.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if ($key == 'name' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'sl.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'IN';
                    }

                    if ($key == 'IPAddressRange' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'ipadd.fromIpAddress';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    $i++;
                }
            } else {

            }
        }
        return $QueryStr;
    }


    public function getUserLocationWiseDiscount($clientIp,$serviceLocationId){

        $qb = $this->createQueryBuilder('sl')
        ->select('sl, iaz, d')
        ->leftJoin('sl.ipAddressZones', 'iaz')
        ->leftJoin('sl.country', 'c')
        ->leftJoin('sl.serviceLocationDiscounts', 'd')
        ->where('iaz.fromIpAddressLong <= :clientIp')
        ->andWhere('iaz.toIpAddressLong >= :clientIp')
        ->setParameter('clientIp', $clientIp)
        ->andWhere('sl.id =:serviceLocationId')
        ->setParameter('serviceLocationId', $serviceLocationId);

        return $qb->getQuery()->getOneOrNullResult();

    }

    public function getSearchServiceLocation($tag,$serviceIds){

        $query = $this->createQueryBuilder('sl')
                    ->select('sl')
                    ->leftJoin('sl.ipAddressZones', 'iaz')
                    ->leftJoin('iaz.services', 'sr')
                    ->where('sr.id IN(:id)')
                    ->setParameter('id', $serviceIds);

        $query->andWhere('sl.name LIKE :name')
              ->setParameter('name', '%' . $tag . '%');

        return $query->getQuery()->getResult();
    }

    public function getAvailableLocationByService($serviceIds,$locationIds){

        $query = $this->createQueryBuilder('sl')
                    ->select('sl')
                    ->leftJoin('sl.ipAddressZones', 'iaz')
                    ->leftJoin('iaz.services', 'sr')
                    ->where('sr.id IN(:id)')
                    ->setParameter('id', $serviceIds)
                    ->andWhere('sl.id IN(:slId)')
                    ->setParameter('slId', $locationIds);

        return $query->getQuery()->getResult();
    }

    public function getValidLocation($admin){
        $returnArray = array();
        $locationlist = array();

        foreach($admin->getServiceLocations() as $serviceLocation) {

            $locationlist[] = $serviceLocation->getId();
        }


//        $getLocation = $this->createQueryBuilder('sl')
//            ->where('sl.id IN (:CO)')
//            ->setParameter('CO', $locationlist);
//
//
//
//        $getLocations = $getLocation->getQuery()->getResult();
//            foreach($getLocations as $key => $record) {
//                $returnArray[] = $record->getCountry()->getId();
//            }

//        return $returnArray;
        return $locationlist;
    }

    public function getPackageServiceLocation($locationName) {

        $qb = $this->createQueryBuilder('sl')
                    ->leftJoin('sl.country', 'c');

        $qb->where('sl.name = :sname');
        $qb->setParameter('sname', $locationName);

        $records = $qb->getQuery()->getResult();
        if (count($records) > 0) {
            return $records[0];
        }
    }


    public function getCountryServiceLocation($country, $credId) {
        $qb = $this->createQueryBuilder('sl', 'pc')
                ->select('sl.id', 'sl.name')
                ->innerJoin('sl.country', 'c');

        if($credId != null){
            $qb->leftJoin('sl.paypalCredentialLocation', 'pc')->where('pc.id IS NULL');
        }
        if(!empty($credId)){
            $qb->orWhere('pc.id = :credCode')->setParameter('credCode', $credId);
        }

        if(!empty($country)){
            $qb->andWhere('c.id = :code')->setParameter('code', $country);
        }
        return $qb->getQuery()->getArrayResult();
    }

	//Added for Gridlist
    public function getChangesSalesReportGrid($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper,$service,$payment,$packageName,$purchasedFrom, $adminServiceLocationPermission) {

        $data = $this->changes_trim_serach_data($searchData, $SearchType);

        $query = $this->createQueryBuilder('sl')
                ->select('sl');

        if(!empty($searchData['serviceLocation'])){
                $query->andWhere('sl.name LIKE :serviceLocation')
                                ->setParameter('serviceLocation', '%'.$searchData['serviceLocation'].'%');
        }
        
        if(!empty($adminServiceLocationPermission)){ 
            $query->andWhere('sl.id IN (:adminServiceLocationPermission)');
            $query->setParameter('adminServiceLocationPermission', $adminServiceLocationPermission);
        }

        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {
            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {
            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);
        $result = $query->getQuery()->getResult();
        $dataResult = array();
        if (count($result) > 0) {
            $dataResult['result'] = $result;
            return $dataResult;
        }
        return false;
    }

     public function changes_trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {

                     if ($key == 'serviceLocation' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'sl.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }
//
//                    if ($key == 'EmailType' && !empty($val)) {
//
//                        $QueryStr[$i]['Field'] = 'e.emailType';
//                        $QueryStr[$i]['Value'] = $val == 'Marketing' ? 'M' : 'S';
//                        $QueryStr[$i]['Operator'] = '=';
//                    }
//
//                     if ($key == 'Status' && !empty($val)) {
//
//                        $QueryStr[$i]['Field'] = 'e.emailStatus';
//                        $QueryStr[$i]['Value'] = $val;
//                        $QueryStr[$i]['Operator'] = '=';
//                    }
//                    $i++;
                }
            } else {

            }
        }
        return $QueryStr;
    }

	public function getExportSalesReport($searchData, $adminServiceLocationPermission = ''){

		$query = $this->createQueryBuilder('sl')
                ->select('sl');

		if(!empty($searchData['serviceLocation'])){
			$query->andWhere('sl.name LIKE :serviceLocation')
					->setParameter('serviceLocation', '%'.$searchData['serviceLocation'].'%');
		}
                if(!empty($adminServiceLocationPermission)){ 
                    $query->andWhere('sl.id IN (:adminServiceLocationPermission)');
                    $query->setParameter('adminServiceLocationPermission', $adminServiceLocationPermission);
                }
		$result = $query->getQuery()->getResult();

		return $result;
	}

  public function getActiveServiceCountReportGrid($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper) {

      $data = $this->trim_active_service_count_serach_data($searchData, $SearchType);
      $query = $this->createQueryBuilder('sl')
              ->orderBy('sl.id', 'desc');

      if ($SearchType == 'ORLIKE') {

          $likeStr = $objHelper->orLikeSearch($data);
      }
      if ($SearchType == 'ANDLIKE') {

          $likeStr = $objHelper->andLikeSearch($data);
      }

      if ($likeStr) {
          $query->andWhere($likeStr);
      }

      $query->orderBy($orderBy, $sortOrder);

      $query->setMaxResults($limit);
      $query->setFirstResult($offset);

      $result = $query->getQuery()->getResult();

      $dataResult = array();

      if (count($result) > 0) {

          $dataResult['result'] = $result;

          return $dataResult;
      }
      return false;
  }

  public function trim_active_service_count_serach_data($searchData, $SearchType) {

      $QueryStr = array();

      if (!empty($searchData)) {

          if ($SearchType == 'ANDLIKE') {

              $i = 0;
              foreach ($searchData as $key => $val) {

                  if ($key == 'serviceLocation' && !empty($val)) {

                      $QueryStr[$i]['Field'] = 'sl.name';
                      $QueryStr[$i]['Value'] = $val;
                      $QueryStr[$i]['Operator'] = '=';
                  }

                  $i++;
              }
          } else {

          }
      }
      return $QueryStr;
  }

   public function getSearchServiceLocationTopupLink($tag){

        $query = $this->createQueryBuilder('sl')
                    ->select('sl');
                    
        $query->andWhere('sl.name LIKE :name')
              ->setParameter('name', '%' . $tag . '%');

        return $query->getQuery()->getResult();
    }

    public function getUserByServiceLocation($id){
        $qb = $this->createQueryBuilder('sl')
            ->select('u.id', 'u.isEmailOptout', 'u.email', 'u.firstname', 'u.isEmailVerified')
            ->innerJoin('sl.users', 'u')
            ->where('sl.id = :id')
            ->setParameter('id', $id)
            ->groupBy('u.id');
        $query = $qb->getQuery();
        return $query->getResult();
    }
    
    public function getServiceLocationForChart(){

        $query = $this->createQueryBuilder('sl')
            ->select('sl','ip')
            ->leftJoin('sl.ipAddressZones', 'ip');

        $result = $query->getQuery()->getArrayResult();
        return $result;
    }
}

