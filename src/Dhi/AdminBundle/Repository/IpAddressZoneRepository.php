<?php

namespace Dhi\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * IpAddressZoneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IpAddressZoneRepository extends EntityRepository {
    
    public function getRemoveIpZoneList($serviceLocationId,$NotInIds){
        $qb = $this->createQueryBuilder('i')
            ->select('i')
            ->where('i.id NOT IN(:Id)')
            ->setParameter('Id', $NotInIds)
            ->andWhere('i.serviceLocation = :serviceLocation')
            ->setParameter('serviceLocation', $serviceLocationId);
        
        $delIpZone = $qb->getQuery()->getResult();
        
        if($delIpZone){
            
            return $delIpZone;
        }
        
        return false;
    }
    
    
     public function checkIpAddressRange($ipAddressZones, $flag = false){
         
        $returnIpAddress = array();
        
        if($ipAddressZones && $flag) {
            
            
               foreach($ipAddressZones as $key => $ipAddress)
               {
                   $fromIp = ip2long($ipAddress->getFromIpAddress());
                   $toIp = ip2long($ipAddress->getToIpAddress());
                   
                   
                    $qb = $this->createQueryBuilder('ip')
                          ->select('ip')
                          ->where('ip.fromIpAddressLong != :fromIP')
                          ->setParameter('fromIP',  $fromIp)  
                          ->orWhere('ip.toIpAddressLong != :toIP')
                          ->setParameter('toIP',  $toIp);
                    
                    $qb->orWhere('ip.fromIpAddressLong >= :fip')
                       ->andWhere('ip.toIpAddressLong <= :tip')
                       ->setParameter('fip',  $fromIp)     
                       ->setParameter('tip',  $toIp);
                     
                    
                    $returnResult = $qb->getQuery()->getResult();
                    
                    if($returnResult) {
                        
                        $returnIpAddress[$key]['fromIp'] = $fromIp;
                        $returnIpAddress[$key]['toIp'] = $toIp;
                        
                    }
                   
               }    
            
        }
          
       return $returnIpAddress; 
        
    }
    
    
     public function getUserService($userIpAddress){
         
        $qb = $this->createQueryBuilder('ip');
            
        $resultIpAddressZone = $qb->getQuery()->getResult();
        
        $flag = false;
        
        if($resultIpAddressZone){
            
            foreach($resultIpAddressZone as $key => $val) {
                
                $fromIpAddress = ip2long($val->getFromIpAddress());
                $toIpAddress = ip2long($val->getToIpAddress());
                //echo $fromIpAddress.'=============='.$toIpAddress."<br>";
                
                if($fromIpAddress != "" AND $toIpAddress != "" AND $fromIpAddress <= $userIpAddress && $toIpAddress >= $userIpAddress)
                {
                    foreach($val->getServices() as $key=>$service) {
                        
                        $service->getName();
                        if(strtoupper($service->getName()) == 'IPTV')
                        {
                            $flag = true;
                        }    
                        
                    }
                }
                
            }
        }
        return $flag;
    }
    
    
    public function getUserIpAddressZone($admin){
        
        $returnArray = array();
        $serviceLocationId = array();
        
        if($admin) {
            
            foreach($admin->getServiceLocations() as $serviceLocation) {
                
                $serviceLocationId[] = $serviceLocation->getId();
            }
        }
        
        $qb = $this->createQueryBuilder('ip')
            ->where('ip.serviceLocation IN (:LID)')
            ->setParameter('LID', $serviceLocationId);
            
        $ipAddressZones = $qb->getQuery()->getResult();
        
        if($ipAddressZones) {
            
            foreach($ipAddressZones as $key => $record) {
                    
                    $returnArray[$key]['fromIP'] = ip2long($record->getFromIpAddress());
                    $returnArray[$key]['toIP'] = ip2long($record->getToIpAddress());
                    
            }
            
        }
        
        return $returnArray;
    }
    
    public function getUserZone($clientIp) {
    	
    	$ipToLong = sprintf("%u", ip2long($clientIp));
        
        $qb= $this->createQueryBuilder('ip')
        			->where('ip.fromIpAddressLong <= :clientIp')
        			->andWhere('ip.toIpAddressLong >= :clientIp')
        			->setParameter('clientIp', $ipToLong);
        
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    
    public function getAdminPurchaseLocation($adminIP,$serviceLocationId) {
    
        $result = array();
        $qb = $this->createQueryBuilder('ip')
                    ->where('ip.fromIpAddressLong <= :clientIp')
                    ->andWhere('ip.toIpAddressLong >= :clientIp')
                    ->setParameter('clientIp', ip2long($adminIP))
                    ->andWhere('ip.serviceLocation = :serviceLocationId')
                    ->setParameter('serviceLocationId', $serviceLocationId);
        
        $data = $qb->getQuery()->getOneOrNullResult();
        
        $result['ipAddress'] = $adminIP;
        $result['data']      = $data;        
    
        if(!$data) {
            
            $qb1 = $this->createQueryBuilder('ip')
                    ->where('ip.serviceLocation = :serviceLocationId')
                    ->setParameter('serviceLocationId', $serviceLocationId);
            
            $data = $qb1->getQuery()->getResult();
            
            if($data) {
                $result['ipAddress'] = $data[0]->getFromIpAddress();
                $result['data']      = $data[0];
            }
        } 
        
        return $result;
    }    

    public function checkIpRangeExistsInRange($clientIpFrom, $clientIpTo, $ipAddressZoneid, $deletedIpAddrIds) {
        $query = $this->createQueryBuilder('ip')
            ->select('count(ip.id)')
            ->where('ip.fromIpAddressLong >= :clientIpFrom')
            ->andWhere('ip.toIpAddressLong <= :clientIpTo')
            ->setParameter('clientIpFrom', ip2long($clientIpFrom))
            ->setParameter('clientIpTo', ip2long($clientIpTo));
        
        if($ipAddressZoneid) {
        
            array_push($deletedIpAddrIds,$ipAddressZoneid);
            $query->andWhere('ip.id NOT IN(:ipAddressZoneId)')->setParameter('ipAddressZoneId',  $deletedIpAddrIds);
        }
        
        $result = $query->getQuery()->getSingleScalarResult();
        
        return $result;
    }

    public function checkIpRangeExists($clientIp,$ipAddressZoneid,$deletedIpAddrIds) {
            
        $query = $this->createQueryBuilder('ip')
                        ->select('count(ip.id)')
                        ->where('ip.fromIpAddressLong <= :clientIp')
                        ->andWhere('ip.toIpAddressLong >= :clientIp')
                        ->setParameter('clientIp', ip2long($clientIp));
        
        if($ipAddressZoneid) {
        
            array_push($deletedIpAddrIds,$ipAddressZoneid);
            $query->andWhere('ip.id NOT IN(:ipAddressZoneId)')->setParameter('ipAddressZoneId',  $deletedIpAddrIds);
        }
        
        $result = $query->getQuery()->getSingleScalarResult();
        
        return $result;    
    }
    
    public function getDeletedId($serviceLocationId,$ipZoneUpdatedIds) {
    
        $query = $this->createQueryBuilder('ip')
                    ->where('ip.serviceLocation =:serviceLocationId')
                    ->setParameter('serviceLocationId', $serviceLocationId);
        
        $query->andWhere('ip.id NOT IN(:ipAddressZoneId)')->setParameter('ipAddressZoneId',  $ipZoneUpdatedIds);
        $result = $query->getQuery()->getResult();
        $ipAddrZoneIds = array();
        if($result) {
            foreach ($result as $ipAddressZone) {
                $ipAddrZoneIds[$ipAddressZone->getId()] = $ipAddressZone->getId(); 
            }
        }
        return $ipAddrZoneIds;
    }

	public function getServicesByLocation($locatoinId, $isBundle = true){
        $query = $this->createQueryBuilder('ip')
            ->select('ip','s.name','s.id')
            ->leftJoin('ip.services', 's')
            ->leftJoin('ip.serviceLocation', 'sl')
            ->andWhere('sl.id =:serviceLocation')
            ->setParameter('serviceLocation',$locatoinId)
            ->andWhere('s.name !=:serviceName')
            ->setParameter('serviceName','TVOD')
            ->groupBy('s.id');

        if($isBundle == false){
            $query->andWhere('s.name != :name')->setParameter('name','BUNDLE');
        }
        $result = $query->getQuery()->getArrayResult();
        $services = array();
        foreach($result as $key => $value) {
            $services[$value['id']] = $value['name'];
        }
        return $services;
    }

    public function getServicesByLocations($location, $arrService){
        $query = $this->createQueryBuilder('ip')
            ->select('ip','s.name','s.id')
            ->leftJoin('ip.services', 's')
            ->leftJoin('ip.serviceLocation', 'sl')
            ->groupBy('s.id');
        $query->andWhere('s.name != :name')->setParameter('name','BUNDLE');
        $query->andWhere('sl.id = :val')->setParameter('val',$location);
        if(!empty($arrService)){
            $query->andWhere('sl.id IN (:service)')->setParameter('service',array_keys($arrService));
        }
        $result = $query->getQuery()->getArrayResult();
        $services = array();
        foreach($result as $key => $value) {
            $services[$value['id']] = $value['name'];
        }
        return $services;
    }
}