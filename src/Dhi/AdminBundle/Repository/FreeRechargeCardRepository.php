<?php
namespace Dhi\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FreeRechargeCardRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FreeRechargeCardRepository extends EntityRepository
{
    public function getFreeRechargeCardGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper) {

        $data = $this->trim_serach_data($searchData, $SearchType);

        $query = $this->createQueryBuilder('fr')
                ->select('fr.id, fr.createdAt, cb.username as CreatedBy, u.username as Username, u.id as UserId, u.email')
                ->leftJoin('DhiUserBundle:User', 'cb', 'WITH', 'cb.id = fr.createdBy')
                ->leftJoin('DhiUserBundle:User', 'u', 'WITH', 'fr.userId = u.id');

        if($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if($likeStr) {

            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);

        $countQuery = clone $query;
        $countQuery->select("count(fr.id) as totalRecords");
        $countData = $countQuery->getQuery()->getSingleScalarResult();

        $query->setMaxResults($limit);
        $query->setFirstResult($offset);


        $result = $query->getQuery()->getArrayResult();

        $dataResult = array();

        if($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }
    
    public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if(!empty($searchData)) {

            if($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {

                    if($key == 'Username' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'u.username';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    if($key == 'Email' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'u.email';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    
                    if($key == 'GivenDateTime' && !empty($val)) {

                        $RequestDate = explode('~', $val);
                        $ReqFrom = trim($RequestDate[0]);
                        $ReqTo = trim($RequestDate[1]);

                        if ($ReqFrom != "") {
                            $startDate = new \DateTime($ReqFrom);

                            $QueryStr[$i]['Field'] = 'fr.createdAt';
                            $QueryStr[$i]['Value'] = $startDate->format('Y-m-d 00:00:00');
                            $QueryStr[$i]['Operator'] = '>=';
                        }
                        if ($ReqTo != "") {
                            if ($ReqFrom != "") {
                                $i++;
                            }
                            $endDate = new \DateTime($ReqTo);
                            $QueryStr[$i]['Field'] = 'fr.createdAt';
                            $QueryStr[$i]['Value'] = $endDate->format('Y-m-d 23:59:59');
                            $QueryStr[$i]['Operator'] = '<=';
                        }
                    }

                    $i++;
                }
            } else {

            }
        }
        return $QueryStr;
    }
    
    public function getCsvFreeRechargeCardData($searchData, $slotArr) {

        $query = $this->createQueryBuilder('fr')
                ->select('fr.id, fr.createdAt, cb.username as CreatedBy, u.username as Username, u.id as UserId, u.email')
                ->leftJoin('DhiUserBundle:User', 'cb', 'WITH', 'cb.id = fr.createdBy')
                ->leftJoin('DhiUserBundle:User', 'u', 'WITH', 'fr.userId = u.id');

        if(!empty($searchData['Username'])) {
            $query->andwhere('u.username LIKE :uname')
                    ->setParameter('uname','%' . $searchData['Username'] . '%');
        }

        if(!empty($searchData['Email'])) {
            $query->andwhere('u.email = :email')
                    ->setParameter('email', $searchData['Email']);
        }
        
        if(!empty($searchData['GivenDateTime'])) {
            $RequestDate = explode('~', $searchData['GivenDateTime']);
            $ReqFrom = trim($RequestDate[0]);
            $ReqTo = trim($RequestDate[1]);

            if ($ReqFrom != "") {
                $startDate = new \DateTime($ReqFrom);
                $query->andWhere('fr.createdAt >= :startdatetime');
                $query->setParameter('startdatetime', $startDate->format('Y-m-d 00:00:00'));
            }
            if ($ReqTo != "") {
                $endDate = new \DateTime($ReqTo);
                $query->andWhere('fr.createdAt <= :enddatetime');
                $query->setParameter('enddatetime', $endDate->format('Y-m-d 23:59:59'));
            }
        }
        if (!empty($slotArr)) {
            $query->setMaxResults($slotArr['limit']);
            $query->setFirstResult($slotArr['offset']);
        }
        $result = $query->getQuery()->getResult();
        return $result;
    }
    
    public function checkUserClaimedCurrentMonth($userId){
        
        $firstDate = date('Y-m-01 00:00:00');
        $lastDate  = date('Y-m-t 23:59:59');
        
        $query = $this->createQueryBuilder('fr')
                ->where('fr.userId = :userid')
                ->setParameter('userid', $userId)
                ->andWhere('fr.createdAt >= :firstDate')
                ->setParameter('firstDate', $firstDate)
                ->andWhere('fr.createdAt <= :lastDate')
                ->setParameter('lastDate', $lastDate);
        
        $result = $query->getQuery()->getResult();
        
        if(count($result) > 0){
            return $result;
        }
        return false;
       
        
    }
}