<?php
namespace Dhi\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TikiliveActiveUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TikiliveActiveUserRepository extends EntityRepository
{
    public function getActiveUserGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper) {

        $data = $this->trim_serach_data($searchData, $SearchType);

        $query = $this->createQueryBuilder('tl')
                ->select('tlp.id as dhiPromoCode', 'tl.id', 'tl.tikiliveLastLogin', 'tl.tikiliveLastIp', 'sl.name as serviceLocation', 'u.id as userId', 'u.username', 'tl.tikiliveUserName', 'tl.actualCountry', 'tlp.isRedeemed')
                ->leftJoin('DhiAdminBundle:TikilivePromoCode', 'tlp', 'with', 'tl.promoCode = tlp.promoCode')
                ->leftJoin('tlp.redeemedBy', 'u')
                ->leftJoin('DhiServiceBundle:PurchaseOrder', 'po', 'with', 'tlp.purchaseId = po.id')
                ->leftJoin('po.servicePurchases', 'sp')
                ->leftJoin('sp.service_location_id', 'sl')
                ->where('tl.isActive = :is_active')
                ->setParameter('is_active', 1)
                ->andWhere('tl.isPromoCodeExpired = :isExpired')
                ->setParameter('isExpired', 0)
                ->groupBy('tl.tikiliveUserName')
                ->addGroupBy('u.username');

        if($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if($likeStr) {

            $query->andWhere($likeStr);
        }
        
        if(isset($searchData['Username']) && $searchData['Username'] != '')
        {
            $query->andWhere('(u.username LIKE :username AND tlp.isRedeemed = :clsisRedeemed) OR (tl.tikiliveUserName LIKE :username AND u.username IS NULL)')
                    ->setParameter('username', '%' . $searchData['Username'] . '%')
                    ->setParameter('clsisRedeemed', 'YES');
        }
        
        $query->orderBy($orderBy, $sortOrder);
        $countQuery = clone $query;
        $countQuery->select("tl.id");
        $countData = count($countQuery->getQuery()->getArrayResult());

        $query->setMaxResults($limit);
        $query->setFirstResult($offset);

        $result = $query->getQuery()->getArrayResult();
        $dataResult = array();
        if($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }
    
    public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if(!empty($searchData)) {

            if($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {

                    if($key == 'Country' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'tl.actualCountry';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }

                    if($key == 'ServiceLocation' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'sl.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }

                    if($key == 'LastLoginIp' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'tl.tikiliveLastIp';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if($key == 'LastLogin' && !empty($val)) {

                        $RequestDate = explode('~', $val);
                        $ReqFrom = trim($RequestDate[0]);
                        $ReqTo = trim($RequestDate[1]);

                        if ($ReqFrom != "") {
                            $startDate = new \DateTime($ReqFrom);

                            $QueryStr[$i]['Field'] = 'tl.tikiliveLastLogin';
                            $QueryStr[$i]['Value'] = $startDate->format('Y-m-d 00:00:00');
                            $QueryStr[$i]['Operator'] = '>=';
                        }
                        if ($ReqTo != "") {
                            if ($ReqFrom != "") {
                                $i++;
                            }
                            $endDate = new \DateTime($ReqTo);
                            $QueryStr[$i]['Field'] = 'tl.tikiliveLastLogin';
                            $QueryStr[$i]['Value'] = $endDate->format('Y-m-d 23:59:59');
                            $QueryStr[$i]['Operator'] = '<=';
                        }
                    }

                    $i++;
                }
            } else {

            }
        }
        return $QueryStr;
    }
    
    public function getCsvTikiliveActiveUserData($searchData, $slotArr) {

        $query = $this->createQueryBuilder('tl')
                ->select('tlp.id as dhiPromoCode', 'tl.id', 'tl.tikiliveLastLogin', 'tl.tikiliveLastIp', 'sl.name as serviceLocation', 'u.id as userId', 'u.username', 'tl.tikiliveUserName', 'tl.actualCountry', 'tlp.isRedeemed')
                ->leftJoin('DhiAdminBundle:TikilivePromoCode', 'tlp', 'with', 'tl.promoCode = tlp.promoCode')
                ->leftJoin('tlp.redeemedBy', 'u')
                ->leftJoin('DhiServiceBundle:PurchaseOrder', 'po', 'with', 'tlp.purchaseId = po.id')
                ->leftJoin('po.servicePurchases', 'sp')
                ->leftJoin('sp.service_location_id', 'sl')
                ->where('tl.isActive = :is_active')
                ->setParameter('is_active', 1)
                ->andWhere('tl.isPromoCodeExpired = :isExpired')
                ->setParameter('isExpired', 0)
                ->groupBy('tl.tikiliveUserName')
                ->addGroupBy('u.username');

        if(!empty($searchData['Username'])) {
            $query->andWhere('(u.username LIKE :username AND tlp.isRedeemed = :clsisRedeemed) OR (tl.tikiliveUserName LIKE :username AND u.username IS NULL)')
                    ->setParameter('username','%' . $searchData['Username'] . '%')
                    ->setParameter('clsisRedeemed', 'YES');
        }

        if(!empty($searchData['Country'])) {
            $query->andwhere('tl.actualCountry = :actualCountry')->setParameter('actualCountry', $searchData['Country']);
        }

        if(!empty($searchData['ServiceLocation'])) {
            $query->andwhere('sl.name = :servicelocation')
                    ->setParameter('servicelocation', $searchData['ServiceLocation']);
        }
        
        if(!empty($searchData['LastLoginIp'])) {
            $query->andwhere('tl.tikiliveLastIp LIKE :lastIp')
                    ->setParameter('lastIp','%' . $searchData['LastLoginIp'] . '%');
        }
        
        if(!empty($searchData['LastLogin'])) {
            $RequestDate = explode('~', $searchData['LastLogin']);
            $ReqFrom = trim($RequestDate[0]);
            $ReqTo = trim($RequestDate[1]);

            if ($ReqFrom != "") {
                $startDate = new \DateTime($ReqFrom);
                $query->andWhere('tl.tikiliveLastLogin >= :startdatetime');
                $query->setParameter('startdatetime', $startDate->format('Y-m-d 00:00:00'));
            }
            if ($ReqTo != "") {
                $endDate = new \DateTime($ReqTo);
                $query->andWhere('tl.tikiliveLastLogin <= :enddatetime');
                $query->setParameter('enddatetime', $endDate->format('Y-m-d 23:59:59'));
            }
        }
        if (!empty($slotArr)) {
            $query->setMaxResults($slotArr['limit']);
            $query->setFirstResult($slotArr['offset']);
        }
        $result = $query->getQuery()->getResult();
        return $result;
    }
    
    public function getAllDistinceActualCountry(){
        $query = $this->createQueryBuilder('tl')
                ->select('tl.actualCountry')
                ->where('tl.actualCountry IS NOT NULL')
                ->orderBy('tl.actualCountry', 'ASC')
                ->groupBy('tl.actualCountry');
        $result = $query->getQuery()->getArrayResult();
        if(count($result) > 0){
            return $result;
        }
        return false;
    }
}