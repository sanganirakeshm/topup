<?php

namespace Dhi\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PromoCodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmployeePromoCodeRepository extends EntityRepository {

    //Added for Gridlist
    public function getEmployeePromoCodeGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper, $createdBy = '') {

        $data = $this->trim_serach_data($searchData, $SearchType);


        $query = $this->createQueryBuilder('epc')
                ->orderBy('epc.id', 'desc')
                ->groupBy('epc.id');

        if (!empty($createdBy) && $createdBy != '') {
            $query->where('epc.createdBy = :createdBy')
                    ->setParameter('createdBy', $createdBy);
        }

        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {

            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);

        $countData = count($query->getQuery()->getArrayResult());

        $query->setMaxResults($limit);
        $query->setFirstResult($offset);


        $result = $query->getQuery()->getResult();

        $dataResult = array();

        if ($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }

    public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {

                    if ($key == 'PromoCode' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'epc.code';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    if ($key == 'CreatedBy' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'epc.createdBy';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if ($key == 'EmployeeName' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'epc.employeeName';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    $i++;
                }
            } else {

            }
        }
        return $QueryStr;
    }

    public function getCountByServiceLocation($serviceLocation,$searchData) {
        
        $query = $this->createQueryBuilder('epc')
                ->select('epc.employeeName as emp_name','count(distinct epc.id) as total_promocodes','count(distinct epcc.id) as total_redemption')
                ->leftJoin('DhiUserBundle:User', 'u', 'with', 'u.username = epc.employeeName')
                ->leftJoin('epc.redeemedCustomer', 'epcc')
                ->andWhere('u.userServiceLocation = :serviceLocationId')
                ->setParameter('serviceLocationId', $serviceLocation)
                ->orderBy('epc.id', 'desc')
                ->groupBy('epc.employeeName');

        if(array_key_exists('Total',$searchData)){
                $RequestDate = explode('~', $searchData['Total']);
				$ReqFrom = trim($RequestDate[0]);
				$ReqTo = trim($RequestDate[1]);

				if ($ReqFrom != "") {
					$startDate = new \DateTime($ReqFrom);
					$query->andWhere('epcc.redeemDate >= :today_startdatetime');
					$query->setParameter('today_startdatetime', $startDate->format('Y-m-d 00:00:00'));
				}
				if ($ReqTo != "") {
					$endDate = new \DateTime($ReqTo);
					$query->andWhere('epcc.redeemDate <= :today_enddatetime');
					$query->setParameter('today_enddatetime', $endDate->format('Y-m-d 23:59:59'));
				}

        }

        $countData = count($query->getQuery()->getArrayResult());
        $result = $query->getQuery()->getArrayResult();
        $dataResult = array();
        

        if ($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }
}