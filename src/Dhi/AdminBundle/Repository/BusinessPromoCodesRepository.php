<?php

namespace Dhi\AdminBundle\Repository;
use Doctrine\ORM\Mapping\OrderBy;
use Doctrine\ORM\EntityRepository;

/**
 * BusinessPromoCodesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessPromoCodesRepository extends EntityRepository {

	public function getBusinessPromoCodeGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper, $batchId = 0) {

        $data = $this->trim_serach_data($searchData, $SearchType, $batchId);
		
		
        $query = $this->createQueryBuilder('bc')
            ->select('bc','p.packageName','p.amount', 'b.displayBundleName','p.validity','p.bandwidth')
            ->leftJoin('DhiAdminBundle:Package','p','with','bc.packageId = p.packageId')
            ->leftJoin('DhiAdminBundle:Bundle','b','with','bc.packageId = b.bundle_id');
            
        if($batchId > 0){
            $query->leftJoin('bc.serviceLocations', 'sp')
                  ->leftJoin('bc.batchId', 'bt')
                  ->where('bc.batchId = :batchId')
                  ->setParameter('batchId', $batchId);
        }
                
        if ($SearchType == 'ORLIKE') {
            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {
            $likeStr = $objHelper->andLikeSearch($data);
        }
        if ($likeStr) {
            $query->andWhere($likeStr);
        }

        $query->andWhere("bc.isPlanExpired <> :isPlanExpired")->setParameter('isPlanExpired', "Yes");
        $query->orderBy($orderBy, $sortOrder);
        $countData = count($query->getQuery()->getArrayResult());
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);
        $result = $query->getQuery()->getResult();
        $dataResult = array();
        if ($countData > 0) {
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
           
            return $dataResult;
        }
        return false;
    }

    public function trim_serach_data($searchData, $SearchType, $batchId) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {
                    
                     if ($key == 'Code' && !empty($val) && $batchId > 0) {
                        $QueryStr[$i]['Field'] = 'bc.code';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if ($key == 'Code' && !empty($val) && $batchId == 0) {
                        $QueryStr[$i]['Field'] = 'bc.code';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }


                    $i++;
                }
            } else {
                
            }
        }
        return $QueryStr;
    }
	
	public function getExportDataOfPromoCode($batchId){
        $query = $this->createQueryBuilder('b')
            ->select('b.code','p.packageName', 'b.duration', 'b.status','b.expirydate','b.note', 'bu.displayBundleName', 'p.amount')
            ->leftJoin('DhiAdminBundle:Package','p','with','b.packageId = p.packageId')
            ->leftJoin('DhiAdminBundle:Bundle','bu','with','b.packageId = bu.bundle_id')
            ->where('b.batchId = :batchId')
            ->setParameter('batchId', $batchId)
            ->andWhere("b.isPlanExpired <> :isPlanExpired")
            ->setParameter('isPlanExpired', "Yes")
            ->orderBy('b.id', 'ASC');
        $result = $query->getQuery()->getArrayResult();
        return $result;
    }

    public function getPackagePromoData($promoCode){

          $query = $this->createQueryBuilder('bpc')
            ->select('bpc','p.packageId', 'p.packageName','p.isDeers','p.description','p.amount','p.validity','p.bandwidth','bisp.isDeers as ispDeers','biptv.isDeers as iptvDeers','b.description as bundleDesc','b.displayBundleName as displayBundleName','b.discount as bundleDiscount','b.bundleName as bundleName', 'b.bundle_id', 'p.isExpired', 'p.isHourlyPlan')
            ->leftJoin('bpc.service', 's')
            ->leftJoin('DhiAdminBundle:Package','p','with','bpc.packageId = p.packageId')
            ->leftJoin('DhiAdminBundle:Bundle','b','with','bpc.packageId = b.bundle_id')
            ->leftJoin('b.isp','bisp')
            ->leftJoin('b.iptv','biptv')
            ->leftJoin('bpc.serviceLocations', 'sl')
            ->orderBy('bpc.id', 'desc')
            ->Where('bpc.status = :status')
            ->setParameter('status', 1)
            ->groupBy('bpc.id');

        if($promoCode){
            $query ->andwhere('bpc.code = :promocode')->setParameter('promocode',$promoCode);
        }
        $result = $query->getQuery()->getOneOrNullResult();
        return $result ;
    }

    public function reAssignPlanCodes($packages){
        $flag = "'Yes'";
        $query = $this->createQueryBuilder('bpc')->update()->set("bpc.isPlanExpired", $flag);
        $query->where('bpc.packageId NOT IN (:packages)')
            ->setParameter('packages', $packages['package']);

        $query->andWhere('bpc.packageId NOT IN (:bundles)')
            ->setParameter('bundles', $packages['bundle']);

        $query->andWhere('bpc.isRedeemed = :isRedeemed')
            ->setParameter('isRedeemed', 'No');
        return $query->getQuery()->execute();
    }

    public function getUnAssignedPromoCodesGrid($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper, $batchId = 0) {
        $data = $this->trim_serach_data_unassigned($searchData, $SearchType, $batchId);
        $query = $this->createQueryBuilder('bpc')
            ->select("bpc.id as pid", "bpc.code", "'Business' as type", "bpc.expirydate as expiryDate", "bpc.duration", "bpc.note", "sl.name as serviceLocation", "bpc.id")
            ->leftJoin('bpc.serviceLocations', 'sl')
            ->Where('bpc.isPlanExpired = :isPlanExpired')
            ->setParameter('isPlanExpired', "Yes");

        if ($SearchType == 'ORLIKE') {
            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {
            $likeStr = $objHelper->andLikeSearch($data);
        }
        if ($likeStr) {
            $query->andWhere($likeStr);
        }

        $result     = $query->getQuery()->getArrayResult();
        $dataResult = array();
        $countData  = count($result);
        if ($countData > 0) {
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
            return $dataResult;
        }
        return false;
    }

    public function trim_serach_data_unassigned($searchData, $SearchType, $batchId) {
        $QueryStr = array();
        if (!empty($searchData)) {
            if ($SearchType == 'ANDLIKE') {
                $i = 0;
                foreach ($searchData as $key => $val) {
                    if ($key == 'code' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'bpc.code';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    $i++;
                }
            }
        }
        return $QueryStr;
    }
}