<?php

namespace Dhi\AdminBundle\Repository;

use Doctrine\ORM\Mapping\OrderBy;
use Doctrine\ORM\EntityRepository;

/**
 * PartnerPromoCodesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PartnerPromoCodesRepository extends EntityRepository {

	public function getPartnerPromoCodeGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper, $batchId = 0, $serviceLocation = '') {

        $data = $this->trim_serach_data($searchData, $SearchType, $batchId);
		
		
        $query = $this->createQueryBuilder('pc')
            ->select('pc','p.packageName','p.amount', 'p.isHourlyPlan')
            ->leftJoin('DhiAdminBundle:Package','p','with','pc.packageId = p.packageId')
            ->leftJoin('pc.serviceLocations', 'sp');
            
        if($batchId > 0){
            $query
            	->leftJoin('pc.batchId', 'bt')
            	->leftJoin('bt.partner', 'pr')
            	->where('pc.batchId = :batchId')
            	->setParameter('batchId', $batchId);
        }
                
        if ($SearchType == 'ORLIKE') {
            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {
            $likeStr = $objHelper->andLikeSearch($data);
        }
        if ($likeStr) {
            $query->andWhere($likeStr);
        }
	
        if($serviceLocation!= '')
        { 
            $query->andWhere('sp.id IN (:serviceLocation)');
            $query->setParameter('serviceLocation', $serviceLocation);
        }

        $query->andWhere("pc.isPlanExpired <> :isPlanExpired")->setParameter('isPlanExpired', "Yes");
        $query->orderBy($orderBy, $sortOrder);
        $countData = count($query->getQuery()->getArrayResult());
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);
        $result = $query->getQuery()->getResult();
        $dataResult = array();
        if ($countData > 0) {
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
           
            return $dataResult;
        }
        return false;
    }
    
     public function trim_serach_data($searchData, $SearchType, $batchId) {
		
        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {
                    
                     if ($key == 'Code' && !empty($val) && $batchId > 0) {
                        $QueryStr[$i]['Field'] = 'pc.code';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if ($key == 'Code' && !empty($val) && $batchId == 0) {
                        $QueryStr[$i]['Field'] = 'pc.code';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }


                    $i++;
                }
            } else {
                
            }
        }
        return $QueryStr;
    }
    
    public function getExportDataOfPromoCode($batchId){
        $query = $this->createQueryBuilder('pc')
            ->select('pc.code','p.packageName', 'pc.duration', 'pc.status','pc.expirydate','pc.note')
            ->leftJoin('DhiAdminBundle:Package','p','with','pc.packageId = p.packageId')
            ->where('pc.batchId = :batchId')
            ->setParameter('batchId', $batchId)
            ->andWhere("pc.isPlanExpired <> :isPlanExpired")
            ->setParameter('isPlanExpired', "Yes")
            ->orderBy('pc.id', 'ASC');
        $result = $query->getQuery()->getArrayResult();
        return $result;
    }
    
    public function getRedeemedCount($locationId, $partnerId, $createdBy, $dates = '')
    {
        $query = $this->createQueryBuilder('pc')
            ->select('pc.packageId','p.packageName', 'count(pc.isRedeemed) as totalRedeemed', 'sum(pc.customerValue) as totalCustomerValue', 'sum(pc.partnerValue) as totalPartnerValue')
            ->innerJoin('pc.batchId', 'b')
            ->innerJoin('b.partner', 'ps')
            ->innerJoin('pc.serviceLocations', 'sp')
            ->leftJoin('DhiAdminBundle:Package','p','with','pc.packageId = p.packageId')
            ->where('sp.id = :serviceLocationId')
            ->setParameter('serviceLocationId', $locationId)
            ->andWhere('ps.id = :partnerId')
            ->setParameter('partnerId', $partnerId)
            ->andWhere('pc.isRedeemed = :isRedeemed')
            ->setParameter('isRedeemed', 1)
            ->having('totalRedeemed > :totalRedeemed')
            ->setParameter('totalRedeemed', 0)
            ->orderBy('pc.packageId', 'ASC')
            ->groupBy('pc.packageId','p.packageName');

            if (!empty($dates)){
                $RequestDate = explode('~', $dates);
                $ReqFrom = trim($RequestDate[0]);
                $ReqTo = trim($RequestDate[1]);

                if ($ReqFrom != "") {
                    $startDate = new \DateTime($ReqFrom);
                    $query->andWhere('pc.redeemedDate >= :fromCreatedAt')->setParameter('fromCreatedAt', $startDate->format('Y-m-d 00:00:00'));
                }
                if ($ReqTo != "") {
                    $endDate = new \DateTime($ReqTo);
                    $query->andWhere('pc.redeemedDate <= :toCreatedAt')->setParameter('toCreatedAt', $endDate->format('Y-m-d 23:59:59'));
                }
            }

        if(!empty($createdBy)){
            $query->andWhere('pc.createdBy = :createdBy')->setParameter('createdBy', $createdBy);
        }
        
        $result = $query->getQuery()->getArrayResult();
        return $result;
    }
    
    public function getLastPromoCode() {
        $query = $this->createQueryBuilder('pc')
            ->where('pc.status = :status')
            ->setParameter('status', 'Active')
            ->andWhere('pc.isRedeemed = :isRedeemed')
            ->setParameter('isRedeemed', 'No')
            ->orderBy('pc.id', 'DESC')
            ->setMaxResults(1)
            ;
        $result = $query->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function reAssignPlanCodes($packages){
        $flag = "'Yes'";
        $query = $this->createQueryBuilder('pc')
            ->update()
            ->set("pc.isPlanExpired", $flag)
            ->where('pc.packageId NOT IN (:packages)')
            ->setParameter('packages', $packages)
            ->andWhere('pc.isRedeemed = :isRedeemed')
            ->setParameter('isRedeemed', 'No');
        return $query->getQuery()->execute();
    }

    public function getUnAssignedPromoCodesGrid($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper, $batchId = 0) {
        $data = $this->trim_serach_data_unassigned($searchData, $SearchType, $batchId);
        $query = $this->createQueryBuilder('bpc')
            ->select("bpc.id as pid", "bpc.code", "'Partner' as type", "bpc.expirydate as expiryDate", "bpc.duration", "bpc.note", "sl.name as serviceLocation", "bpc.id")
            ->leftJoin('bpc.serviceLocations', 'sl')
            ->Where('bpc.isPlanExpired = :isPlanExpired')
            ->setParameter('isPlanExpired', "Yes");

        if ($SearchType == 'ORLIKE') {
            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {
            $likeStr = $objHelper->andLikeSearch($data);
        }
        if ($likeStr) {
            $query->andWhere($likeStr);
        }

        $result     = $query->getQuery()->getArrayResult();
        $dataResult = array();
        $countData  = count($result);
        if ($countData > 0) {
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
            return $dataResult;
        }
        return false;
    }

    public function trim_serach_data_unassigned($searchData, $SearchType, $batchId) {
        $QueryStr = array();
        if (!empty($searchData)) {
            if ($SearchType == 'ANDLIKE') {
                $i = 0;
                foreach ($searchData as $key => $val) {
                    if ($key == 'code' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'bpc.code';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    $i++;
                }
            }
        }
        return $QueryStr;
    }
}