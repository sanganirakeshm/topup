<?php

namespace Dhi\AdminBundle\Repository;

use Doctrine\ORM\Mapping\OrderBy;
use Doctrine\ORM\EntityRepository;

/**
 * PackageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PackageRepository extends EntityRepository {

	public function getAllPackage($serviceLocationId, $activeService, $conditions = array()) {

		$qb = $this->createQueryBuilder('p')
			->select('p', 'ch')
			->leftJoin('p.serviceLocation', 'sl')
			->leftJoin('p.channels', 'ch')
			->leftJoin('sl.country', 'c')
			->where('p.serviceLocation = :serviceLocation')
			->setParameter('serviceLocation', $serviceLocationId)
			->andWhere('p.isBundlePlan = :isBundlePlan')
			->setParameter('isBundlePlan', false)
			->andWhere('p.isForPartner = :isForPartner')
			->setParameter('isForPartner', false)
			->andWhere('p.isExpired = :isExpired')
			->setParameter('isExpired', false)
			->OrderBy('p.amount');

        $qb->andWhere('p.isEmployee = :isEmployee')->setParameter('isEmployee', !empty($conditions['isEmployee']) ? $conditions['isEmployee'] : 0);
        if(!empty($conditions['service']) && $conditions['service'] == 'IPTV'){
            $qb->andWhere('p.packageType = :packageType')->setParameter('packageType', $conditions['service']);

        }else if(!empty($conditions['service']) && $conditions['service'] == 'ISP'){
            $qb->andWhere('p.packageType IN (:packageType)')->setParameter('packageType', array('ISP'));
        
        }else if(!empty($conditions['service']) && $conditions['service'] == 'PREMIUM'){
            $qb->andWhere('p.packageType = :packageType')->setParameter('packageType', 'PREMIUM');
        }

        if (!empty($conditions['IsBundleAvailabledInPurchased']) && $conditions['IsBundleAvailabledInPurchased'] == 1) {
        	if ($conditions['service'] == 'ISP') {
        		$qb->innerJoin('p.ispRegularBundle', 'pr');

        	}else if ($conditions['service'] == 'ISP') {
        		$qb->innerJoin('p.iptvRegularBundle', 'pr');

        	}
        }else if(!empty($conditions['IsIPTPVAvailabledInPurchased']) && $conditions['IsIPTPVAvailabledInPurchased'] == 1){
        	if (in_array($conditions['service'], array('ISP', 'BUNDLE'))) {
        		$qb->innerJoin('p.ispRegularBundle', 'pr');
        	}
        }

		$resultPackages = $qb->getQuery()->getArrayResult();
                $packageArr = array();

		if (!empty($resultPackages)) {

			foreach ($resultPackages as $key => $package) {

				if ($package['packageType'] == 'ISP') {

					$ISPPackage = false;
					if ($activeService['ISP']) {
						$validity = (($package['isHourlyPlan'] == 1) ? ($package['validity'] / 24) : $package['validity']);

						if ($activeService['ISP']['actualValidity'] <= $validity) {
							if ($package['amount'] > $activeService['ISP']['amount'] && $activeService['ISP']['bandwidth'] <= $package['bandwidth']) {
								$ISPPackage = true;
							}
						}
					} else {
						$ISPPackage = true;
					}

					if ($ISPPackage) {

						$ispArr = array(
							'Id' => $package['id'],
							'packageId' => $package['packageId'],
							'packageName' => $package['packageName'],
							'packagePrice' => $package['amount'],
							'packageChannelCount' => $package['totalChannels'],
							'validity' => $package['validity'],
							'bandwidth' => $package['bandwidth'],
							'isDeers' => $package['isDeers'],
							'description' => $package['description'],
							'isAddons' => $package['isAddons'],
							'isCheckDeersAuthentication' => 0,
							'isHourlyPlan' => $package['isHourlyPlan']
						);
                        if($package['isPromotionalPlan']){
                            $packageArr['PROMOTIONAL'][$package['packageType']][] = $ispArr;
                        }else{
                            $packageArr[$package['packageType']][] = $ispArr;
                        }
					}
				}

				if ($package['packageType'] == 'IPTV') {

					$IPTVPackage = false;
					if ($activeService['IPTV']) {

						if ($package['amount'] > $activeService['IPTV']['amount'] || $package['packageId'] == $activeService['IPTV']['packageId']) {

							$IPTVPackage = true;
						}
					} else {

						$IPTVPackage = true;
					}

					if ($IPTVPackage) {

						$isCheckDeersAuth = 0;
						if ($package['isDeers'] == 1 && !empty($conditions['isDeersAuthenticated']) && $conditions['isDeersAuthenticated'] == 2) {

							$isCheckDeersAuth = 1;
						}

						$iptvArr = array(
                                                        'Id' => $package['id'],
							'packageId' => $package['packageId'],
							'packageName' => $package['packageName'],
							'packagePrice' => $package['amount'],
							'packageChannelCount' => $package['totalChannels'],
							'validity' => $package['validity'],
							'bandwidth' => $package['bandwidth'],
							'isDeers' => $package['isDeers'],
							'description' => $package['description'],
							'isAddons' => $package['isAddons'],
							'isCheckDeersAuthentication' => $isCheckDeersAuth
						);
                        $channelArr = array();
                        foreach ($package['channels'] as $key => $channel) {
                            if($channel['status'] == 1){
                                $channelArr[$channel['id']] = $channel['name'];
                            }
                        }
                        $iptvArr['channels'] = $channelArr;
                        if($package['isPromotionalPlan']){
                            $packageArr['PROMOTIONAL'][$package['packageType']][] = $iptvArr;
                        }else{
                            $packageArr[$package['packageType']][] = $iptvArr;
                        }
					}
				}

				if ($package['packageType'] == 'PREMIUM') {

					$premiumPackage = true;
					if (!empty($activeService['AddOnIds']) && isset($conditions['isPurchased']) && $conditions['isPurchased'] == false) {

						if (in_array($package['packageId'], $activeService['AddOnIds'])) {
							$premiumPackage = false;
						}
					}

					if ($premiumPackage) {

						$premiumArr = array(
							'Id'                         => $package['id'],
							'packageId'                  => $package['packageId'],
							'packageName'                => $package['packageName'],
							'packagePrice'               => $package['amount'],
							'packageChannelCount'        => $package['totalChannels'],
							'validity'                   => $package['validity'],
							'isDeers'                    => $package['isDeers'],
							'description'                => $package['description'],
							'isAddons'                   => $package['isAddons'],
							'isCheckDeersAuthentication' => 0
						);

						$packageArr['PREMIUM'][] = $premiumArr;
					}
				}
			}
		}

		return $packageArr;
	}

	public function countDeersIPTVPackage($serviceLocationId) {

		$query = $this->createQueryBuilder('p')
				->select('count(p.id)')
				->leftJoin('p.serviceLocation', 'sl')
				->leftJoin('sl.country', 'c')
				->where('p.serviceLocation = :serviceLocation')
				->setParameter('serviceLocation', $serviceLocationId)
				->andWhere('p.isDeers =:isDeers')
				->setParameter('isDeers', 1)
				->andWhere('p.packageType =:packageType')
				->setParameter('packageType', 'IPTV');

		$result = $query->getQuery()->getSingleScalarResult();

		return $result;
	}

	public function countDeersPackageFromId($packageIds) {

		$query = $this->createQueryBuilder('p')
				->select('count(p.id)')
				->where('p.packageId IN(:packageIds)')
				->setParameter('packageIds', $packageIds)
				->andWhere('p.isDeers =:isDeers')
				->setParameter('isDeers', 1);

		$result = $query->getQuery()->getSingleScalarResult();

		return $result;
	}

	public function getActiveUserReportGrid($limit = 0, $offset = 10, $order_by = "p.packageId", $sort_order = "asc", $searchData, $SearchType, $objHelper, $user = "", $ipAddressZones = "", $admin = '', $country = '') {
		$data = $this->trim_serach_data($searchData, $SearchType);
		$query = $this->createQueryBuilder('p');
		$query->select('count(p.packageId) as totalMember', 'p.packageName as packageName', 'p.packageType as location');
		$query->groupBy('p.packageId')
				->OrderBy('p.packageId');
		if ($SearchType == 'ORLIKE') {

			$likeStr = $objHelper->orLikeSearch($data);
		}
		if ($SearchType == 'ANDLIKE') {

			$likeStr = $objHelper->andLikeSearch($data);
		}
		if ($likeStr) {

			$query->andWhere($likeStr);
		}
		$query->orderBy($order_by, $sort_order);
		$countData = count($query->getQuery()->getArrayResult());
		$query->setMaxResults($limit);
		$query->setFirstResult($offset);
		$result = $query->getQuery()->getResult();
		$dataResult = array();
		if ($countData > 0) {
			$dataResult['result'] = $result;
			$dataResult['totalRecord'] = $countData;
			return $dataResult;
		}
		return false;
	}

	public function getPackageGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper, $serviceLocations = array(), $isAssignedTikiLivePlan = '') {

		$data = $this->trim_serach_data($searchData, $SearchType);

		$query = $this->createQueryBuilder('p')
                                ->select('p.id', 'p.packageId', 'p.packageName', 'p.packageType', 'p.amount', 'p.bandwidth', 'p.validity', 'sl.name as serviceLocation', 'pkw.tikiLivePlanName', 'p.freeRechargeCard')
				->leftJoin('p.serviceLocation', 'sl')
				->leftJoin('DhiAdminBundle:PackageWiseTikiLivePlan', 'pkw', 'with', 'p.packageId = pkw.packageId')
				->where('p.isAddons =:isAddons')
				->setParameter('isAddons', 0)
				->OrderBy('p.amount');

		if (!empty($serviceLocations)) {
			$query->andWhere('sl.name IN (:slName)')
			->setParameter('slName', $serviceLocations);
		}
                if(!empty($isAssignedTikiLivePlan)){
                    if($isAssignedTikiLivePlan == 'Assigned'){
                            $query->andWhere('pkw.tikiLivePlanName IS NOT NULL');
                        }else if($isAssignedTikiLivePlan == 'UnAssigned'){
                            $query->andWhere('pkw.tikiLivePlanName IS NULL');
                        }
                }
		if ($SearchType == 'ORLIKE') {

			$likeStr = $objHelper->orLikeSearch($data);
		}
		if ($SearchType == 'ANDLIKE') {

			$likeStr = $objHelper->andLikeSearch($data);
		}

		if ($likeStr) {

			$query->andWhere($likeStr);
		}
                
		$query->orderBy($orderBy, $sortOrder);

		$countData = count($query->getQuery()->getArrayResult());

		$query->setMaxResults($limit);
		$query->setFirstResult($offset);

		$result = $query->getQuery()->getResult();

		$dataResult = array();

		if ($countData > 0) {

			$dataResult['result'] = $result;
			$dataResult['totalRecord'] = $countData;

			return $dataResult;
		}
		return false;
	}

	public function getPackageServiceList($serviceLocation) {
		$query = $this->createQueryBuilder('p')
				->select('p', 'count(us.user)')
				->leftJoin('p.serviceLocation', 'sl')
				->leftJoin('DhiUserBundle:UserService', 'us', 'with', 'p.packageId = us.packageId and us.sentExpiredNotification = 0')
				->where('sl.name IN(:serviceLocation)')
				->groupBy('p.packageId')
				->setParameter('serviceLocation', $serviceLocation);

		$countData = count($query->getQuery()->getArrayResult());
		$result = $query->getQuery()->getArrayResult();

		$dataResult = array();
		if ($countData > 0) {
			$dataResult['result'] = $result;
			$dataResult['totalRecord'] = $countData;
			return $dataResult;
		}
		return false;
	}

	public function trim_serach_data($searchData, $SearchType) {

		$QueryStr = array();

		if (!empty($searchData)) {

			if ($SearchType == 'ANDLIKE') {

				$i = 0;
				foreach ($searchData as $key => $val) {

					if ($key == 'PackageType' && !empty($val)) {

						$QueryStr[$i]['Field'] = 'p.packageType';
						$QueryStr[$i]['Value'] = $val;
						$QueryStr[$i]['Operator'] = '=';
					}

					if ($key == 'paymentMethod' && !empty($val)) {

						$QueryStr[$i]['Field'] = 'p.packageName';
						$QueryStr[$i]['Value'] = $val;
						$QueryStr[$i]['Operator'] = '=';
					}
					if ($key == 'location' && !empty($val)) {

						$QueryStr[$i]['Field'] = 'p.packageType';
						$QueryStr[$i]['Value'] = $val;
						$QueryStr[$i]['Operator'] = '=';
					}
					if ($key == 'totalMember' && !empty($val)) {

						$QueryStr[$i]['Field'] = 'p.serviceLocation';
						$QueryStr[$i]['Value'] = $val;
						$QueryStr[$i]['Operator'] = '=';
					}

					if ($key == 'ServiceLocation' && !empty($val)) {

						$QueryStr[$i]['Field'] = 'sl.name';
						$QueryStr[$i]['Value'] = $val;
						$QueryStr[$i]['Operator'] = '=';
					}
                                        
					if ($key == 'TikiLivePlanName' && !empty($val)) {

						$QueryStr[$i]['Field'] = 'pkw.tikiLivePlanName';
						$QueryStr[$i]['Value'] = $val;
						$QueryStr[$i]['Operator'] = '=';
					}
                                        
                                        if ($key == 'FreeRechargeCard' && !empty($val)) {
                                                $arrVal = array('Enable' => 1, 'Disable' => 0);
						$QueryStr[$i]['Field'] = 'p.freeRechargeCard';
						$QueryStr[$i]['Value'] = $arrVal[$val];
						$QueryStr[$i]['Operator'] = '=';
					}
                                        
					$i++;
				}
			} else {

			}
		}
		return $QueryStr;
	}

	public function getPackageType() {
		$query = $this->createQueryBuilder('p')
				->select('p')
				->andWhere('p.isAddons =:isAddons')
				->setParameter('isAddons', 0)
				->groupBy('p.packageType');

		$result = $query->getQuery()->getArrayResult();

		return $result;
	}

	public function getPackages() {
		$query = $this->createQueryBuilder('p')
			->select('p', 'sl')
			->innerJoin('p.serviceLocation', 'sl');
		$result = $query->getQuery()->getArrayResult();

		return $result;
	}

	public function getPackagesForActiveUsers() {
		$query = $this->createQueryBuilder('p')
				->select('p.packageName')
				->groupBy('p.packageName');

		$result = $query->getQuery()->getArrayResult();

		return $result;
	}

	public function getPromoPackages(){
		$query = $this->createQueryBuilder('p');
		$result = $query->getQuery()->getArrayResult();
		$package = array();
		foreach($result as $key => $value){
			$package[$value['packageId']] = $value['packageName'].' - $'.$value['amount'];
		}
		return $package;
	}

	public function getPackageTypeByService($serviceName,$locationId, $isPartner = false, $isExpired = false){

		$query = $this->createQueryBuilder('p');
	
		if($isPartner == true){
        	$query->where('p.isForPartner = :isForPartner')->setParameter('isForPartner', 1);
		}

		if($isExpired == true){
        	$query->andwhere('p.isExpired = :isExpired')->setParameter('isExpired', 0);
		}
		
		if($serviceName){
                    $query->andwhere('p.packageType = :pmname')
                           ->setParameter('pmname', $serviceName);
		}
		if($locationId != null){
                    $query->andWhere('p.serviceLocation IN( :serviceLocation )')
                        ->setParameter('serviceLocation', $locationId);
		}

		$result = $query->getQuery()->getArrayResult();
		return $result;
	}

	public function getCountryByIPTVService() {

		$query = $this->createQueryBuilder('p')
				->select('sl', 'c', 'p')
				->leftJoin('p.serviceLocation', 'sl')
				->leftJoin('sl.country', 'c')
				->where('p.packageType =:name')
				->setParameter('name', 'IPTV')
				->groupBy('c.id');


		$packageArrayResult = $query->getQuery()->getArrayResult();

		if ($packageArrayResult) {
			$countries = array();
			foreach ($packageArrayResult as $country) {
				$countries[$country['serviceLocation']['country']['isoCode']] = $country['serviceLocation']['country']['name'];
			}

			return $countries;
		} else {
			$nullArray = array();
			return $nullArray;
		}
	}

    public function gettikilivePackageTypeByService($serviceName,$locationName, $isPartner = false, $isExpired = false){

		$query = $this->createQueryBuilder('p')
                         ->leftJoin('p.serviceLocation', 'sl');
	
		if($isPartner == true){
        	$query->where('p.isForPartner = :isForPartner')->setParameter('isForPartner', 1);
		}

		if($isExpired == true){
        	$query->andwhere('p.isExpired = :isExpired')->setParameter('isExpired', 0);
		}
		
		if($serviceName){
                    $query->andwhere('p.packageType = :pmname')
                           ->setParameter('pmname', $serviceName);
		}
		if($locationName != null){
                    $query->andWhere('sl.name = :locationaname')
                        ->setParameter('locationaname', $locationName);
		}
                  
		$result = $query->getQuery()->getArrayResult();
		return $result;
	}

	public function getBundleFromPlan($conditions = array(), $resultType = 'select'){
            $qb = $this->createQueryBuilder('p');

            $qb->innerJoin('p.serviceLocation', 'sl')
				->innerJoin('p.ispBundle', 'bundle')
                ->innerJoin('bundle.regularIptv', 'iptv')
                ->innerJoin('bundle.regularIsp', 'isp')
                ->innerJoin('bundle.iptv', 'bundleIptv')
				->where('p.isBundlePlan = :isBundlePlan')
				->setParameter('isBundlePlan', true)
                ->andWhere('p.isForPartner = :isForPartner')
				->setParameter('isForPartner', false)
				->andWhere('p.isExpired = :isExpired')
				->setParameter('isExpired', false)
				->OrderBy('p.amount');

			if (!empty($conditions['serviceLocationId'])) {
				$qb->andWhere('p.serviceLocation = :p_serviceLocation')
					->setParameter('p_serviceLocation', $conditions['serviceLocationId']);
				$qb->andWhere('iptv.serviceLocation = :iptv_serviceLocation')
					->setParameter('iptv_serviceLocation', $conditions['serviceLocationId']);
				$qb->andWhere('isp.serviceLocation = :isp_serviceLocation')
					->setParameter('isp_serviceLocation', $conditions['serviceLocationId']);
				$qb->andWhere('bundleIptv.serviceLocation = :bundleIptv_serviceLocation')
					->setParameter('bundleIptv_serviceLocation', $conditions['serviceLocationId']);
			}

			if (!empty($conditions['activeService']['ISP']['amount'])) {
				$qb->andWhere("bundle.amount >= :ispAmount")->setParameter('ispAmount', $conditions['activeService']['ISP']['amount']);

				if(!empty($conditions['activeService']['ISP']['bundle'])){
					$activeBundle = $this->_em->getRepository("DhiAdminBundle:Bundle")->findOneBy(array('bundle_id' => $conditions['activeService']['ISP']['bundle']));
					if ($activeBundle !== null) {
						$bundleAmount = $activeBundle->getAmount();
						$qb->andWhere("bundle.amount >= :bundleAmount")->setParameter('bundleAmount', $bundleAmount);
					}
				}
			}

			if (!empty($conditions['activeService']['IPTV']['amount'])) {
				$qb->andWhere("bundle.amount > :iptvAmount")->setParameter('iptvAmount', $conditions['activeService']['IPTV']['amount']);
			}

			// true / false
			if (!empty($conditions['isAutoBundle'])) {
				$qb->andWhere('bundle.isAutoBundle = :isAutoBundle')
					->setParameter('isAutoBundle', $conditions['isAutoBundle']);
			}

			if (!empty($conditions['ispPackageId'])) {
				$qb->andWhere('isp.packageId = :ispPackageId')
					->setParameter('ispPackageId', $conditions['ispPackageId']);
			}

			if ($resultType == 'select') {
            	$qb->select('isp.packageName as ispName', 'bundle.bundle_id', 'iptv.packageName as iptvName', 'isp.packageId as regularIspPackageId', 'iptv.packageId as regularIptvPackageId', 'bundleIptv.isDeers', 'bundleIptv.packageId as bundleIptvId', 'bundle.amount');
            	$result = $qb->getQuery()->getArrayResult();

            }else if($resultType == 'count'){
            	$qb->select('count(isp.id) as total');
            	$result = $qb->getQuery()->getSingleScalarResult();
            }

            return $result;
        }
        
    public function getFreeRechargeCardPackages(){
        $query = $this->createQueryBuilder('p')
                ->select('p.packageId')
                ->where('p.status = :status')
                ->setParameter('status', 1)
                ->andWhere('p.isExpired = :isExpired')
                ->setParameter('isExpired', 0)
                ->andWhere('p.freeRechargeCard = :freeRechargeCard')
                ->setParameter('freeRechargeCard', 1);
        $result = $query->getQuery()->getArrayResult();
        if(count($result) > 0){
            return $result;
        }
        return false;
    }
}