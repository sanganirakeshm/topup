<?php

namespace Dhi\AdminBundle\Repository;
use Doctrine\ORM\EntityRepository;

/**
 * ServiceLocationWiseChaseMerchantIdRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceLocationWiseChaseMerchantIdRepository extends EntityRepository
{
    public function getServiceLocationWiseChaseMidGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper)
    {
        $data = $this->trim_serach_data($searchData, $SearchType);
        $query = $this->createQueryBuilder('c')
                ->select('c.id, sl.name AS serviceLocation, cm.merchantId, cm.merchantName, c.createdAt, c.updatedAt')
                ->leftJoin('c.serviceLocation', 'sl')
                ->leftJoin('c.chaseMerchantIds', 'cm')
                ->where('c.isDeleted = :isdeleted')
                ->setParameter('isdeleted', 0);
                
        if ($SearchType == 'ORLIKE') {
            $likeStr = $objHelper->orLikeSearch($data);
        } else if ($SearchType == 'ANDLIKE') {
            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {
            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);
        $countData = count($query->getQuery()->getArrayResult());
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);
        $result = $query->getQuery()->getResult();
        
        $dataResult = array();
        if ($countData > 0) {
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
            return $dataResult;
        }
        return false;
    }
    
    public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();
        if (!empty($searchData)) {
            if ($SearchType == 'ANDLIKE') {
                $i = 0;
                foreach ($searchData as $key => $val) {
                    if ($key == 'ServiceLocation' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'sl.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }
                    if ($key == 'MerchantId' && !empty($val)) {
                        $QueryStr[$i]['Field'] = 'cm.id';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = '=';
                    }
                    $i++;
                }
            }
        }
        return $QueryStr;
    }
    
    public function checkUniqueMerchantId($merchantId, $id = ''){
        
        $query = $this->createQueryBuilder('c')
                 ->select('count(c.id)')
                ->where('c.merchantId = :merchantId')
                ->setParameter('merchantId', $merchantId);
        if(isset($id)){
            $query->andWhere('c.id != :id')
                  ->setParameter('id', $id);
        }
            
       $result = $query->getQuery()->getSingleScalarResult();
       return $result;
       
    }
}
