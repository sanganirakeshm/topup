<?php

namespace Dhi\ServiceBundle\Repository;

use Symfony\Component\Validator\Constraints\Count;
use Doctrine\ORM\EntityRepository;

/**
 * ServicePurchaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServicePurchaseRepository extends EntityRepository {

    public function getActiveUserService($user, $service) {

        $qb = $this->createQueryBuilder('sp')
                ->leftJoin('DhiUserBundle:UserService', 'us', 'with', 'sp.services=us.service and sp.user=us.user')
                ->where('sp.services = :service')
                ->setParameter('service', $service)
                ->andWhere('sp.user = :user')
                ->setParameter('user', $user)
                ->andWhere('sp.paymentStatus = :paymentstatus')
                ->setParameter('paymentstatus', 'Completed')
                ->andWhere('us.status = :status')
                ->setParameter('status', '1')
                ->orderBy('sp.updatedAt', 'desc');
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getExpiredServices() {

        $qb = $this->createQueryBuilder('sp')
                ->select('sp')
                ->where('sp.expiredAt < :today')
                ->setParameter('today', date());

        return $qb->getQuery()
                        ->getResult();
    }

    public function getPurchaseCartItem($user, $paypalStatus = 'New', $purchaseOrder = '') {

        $qb = $this->createQueryBuilder('sp')
                ->select('sp')
                ->where('sp.user = :user')
                ->setParameter('user', $user)
                ->andWhere('sp.paymentStatus = :paypalStatus')
                ->setParameter('paypalStatus', $paypalStatus);

        if ($purchaseOrder) {
            $qb->andWhere('sp.purchaseOrder = :purchaseOrder')->setParameter('purchaseOrder', $purchaseOrder);
        }

        $servicePurchases = $qb->getQuery()->getResult();

        $itemArr = array();
        if ($servicePurchases) {

            $amount = 0;
            foreach ($servicePurchases as $servicePurchase) {

                if ($servicePurchase->getPayableAmount() > 0) {

                    $amount = $servicePurchase->getPayableAmount();
                    //$Service = ($servicePurchase->getService()) ? strtoupper($servicePurchase->getService()->getName()) : '';
                    $Service = '';
                    if($servicePurchase->getService()) {

                           if($servicePurchase->getService()->getName() == 'IPTV') {

                               $Service = 'ExchangeVUE';

                           } else {

                               $Service = $servicePurchase->getService()->getName();
                           }

                    }

                    //$Service = ($servicePurchase->getService()) ? strtoupper($servicePurchase->getService()->getName()) : '';
                    $Package = $servicePurchase->getPackageName();
                    $IsAddon = $servicePurchase->getIsAddon();
                    $IsCredit = $servicePurchase->getIsCredit();

                    if ($IsCredit && $servicePurchase->getCredit()) {

                        $name = 'Credit Purchase';
                        $desc = 'Pay $' . $amount . ' and get $' . $servicePurchase->getCredit()->getCredit() . ' credit in your account.';
                    } else {
                        $IsAddon = ($IsAddon) ? 'AddOn ' : '';
                        $name = $Service . ' ' . $IsAddon . 'Service';
                        $desc = 'Package: ' . $Package;
                    }

                    $tempArr = array();
                    $tempArr['name'] = $name;
                    $tempArr['desc'] = $desc;
                    $tempArr['amt'] = $amount;

                    $itemArr[] = $tempArr;
                }
            }

            return array('item' => $itemArr);
        }
        return false;
    }

    public function getTotalSuccessAndFailPayment($purchaseOrderId, $user) {
        $qb = $this->createQueryBuilder('sp')
                ->select('sp')
                ->where('sp.purchaseOrder = :purchaseOrderId')
                ->setParameter('purchaseOrderId', $purchaseOrderId)
                ->andWhere('sp.user = :userId')
                ->setParameter('userId', $user);

        $result = $qb->getQuery()->getResult();

        $responseArr = array();
        $responseArr['totalSuccessPayment'] = '';
        $responseArr['totalFailPayment'] = '';
        $totalSuccessPaymentAmt = 0;
        $totalFailPaymentAmt = 0;

        if ($result) {

            foreach ($result as $purchase) {

                if ($purchase->getRechargeStatus() == 1) {

                    $totalSuccessPaymentAmt += $purchase->getPayableAmount();
                } else {

                    $totalFailPaymentAmt += $purchase->getPayableAmount();
                }
            }

            $responseArr['totalSuccessPayment'] = $totalSuccessPaymentAmt;
            $responseArr['totalFailPayment'] = $totalFailPaymentAmt;
        }

        return $responseArr;
    }

    public function getPaymentCompletedData($user, $purchaseOrderId, $serviceId = '', $isAddonPackage = 0) {

        $qb = $this->createQueryBuilder('sp')
                ->select('sp')
                ->where('sp.user = :user')
                ->setParameter('user', $user)
                ->andWhere('sp.paymentStatus = :paymentStatus')
                ->setParameter('paymentStatus', 'Completed')
                ->andWhere('sp.purchaseOrder = :purchaseOrder')
                ->setParameter('purchaseOrder', $purchaseOrderId)
                ->andWhere('sp.isAddon = :isAddon')
                ->setParameter('isAddon', $isAddonPackage);

        if ($serviceId) {

            $qb->andWhere('sp.service = :service')->setParameter('service', $serviceId);
        }

        $paymentSuccessData = $qb->getQuery()->getResult();

        if ($paymentSuccessData) {

            return $paymentSuccessData;
        }
        return false;
    }

    public function getPurchaseIds($sessionId) {

        $qb = $this->createQueryBuilder('sp')
                ->select('sp.id, sp.packageId')
                ->where('sp.sessionId = :sessionId')
                ->setParameter('sessionId', $sessionId)
                ->andWhere('sp.paymentStatus = :paymentStatus')
                ->setParameter('paymentStatus', 'New')
                ->getQuery();

        $result = $qb->getArrayResult();

        return $result;
    }

    public function getUserCartItems($user, $sessionId, $paymentStatus = 'New', $isBundle = false) {

        $qb = $this->createQueryBuilder('sp')
                ->select('sp')
                ->where('sp.user = :userid')
                ->setParameter('userid', $user)
                ->andWhere('sp.paymentStatus = :paymentStatus')
                ->setParameter('paymentStatus', $paymentStatus)
                ->andWhere('sp.sessionId = :sessionId')
                ->setParameter('sessionId', $sessionId)
                ->andWhere('sp.isCredit = :isCredit')
                ->setParameter('isCredit', 0)
                ->orderBy('sp.updatedAt', 'DESC');

        if($isBundle){
            $qb ->andWhere('sp.purchase_type = :bundle')
                ->setParameter('bundle', 'BUNDLE');
        }


        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function selectPackage($sessionId, $user, $service) {
        $query = $this->createQueryBuilder('sp')
                ->leftJoin('sp.service', 's')
                ->where('sp.sessionId = :sessionId')
                ->setParameter('sessionId', $sessionId)
                ->andWhere('sp.paymentStatus = :paymentStatus')
                ->setParameter('paymentStatus', 'New')
                ->andWhere('sp.user = :user')
                ->setParameter('user', $user)
                ->andWhere('s.name = :name')
                ->setParameter('name', $service);


        $returnResult = $query->getQuery()->getResult();
        return $returnResult;
    }

    public function deleteServicePackage($sessionId, $user, $service, $id, $addon) {

        $qb = $this->createQueryBuilder('s');
        $qb->delete();
        $qb->where('s.sessionId = :sessionId');
        $qb->setParameter('sessionId', $sessionId);

        $qb->andWhere('s.paymentStatus = :paymentStatus');
        $qb->setParameter('paymentStatus', 'New');

        $qb->andWhere('s.user = :user');
        $qb->setParameter('user', $user);

        $qb->andWhere('s.service = :service');
        $qb->setParameter('service', $service);

        if ($addon && $id) {
            $qb->andWhere('s.isAddon = :isAddon');
            $qb->setParameter('isAddon', 1);

            $qb->andWhere('s.id = :spid');
            $qb->setParameter('spid', $id);
        }

        return $qb->getQuery()->execute();
    }

    public function deleteItemFromCart($sessionId, $user, $ids) {

        $qb = $this->createQueryBuilder('s');
        $qb->delete();
        $qb->where('s.sessionId = :sessionId');
        $qb->setParameter('sessionId', $sessionId);

        $qb->andWhere('s.user = :user');
        $qb->setParameter('user', $user);

        $qb->andWhere('s.paymentStatus = :paymentStatus');
        $qb->setParameter('paymentStatus', 'New');

        $qb->andWhere('s.id IN(:spid)');
        $qb->setParameter('spid', $ids);


        return $qb->getQuery()->execute();
    }

    public function getAddonPackage($sessionId, $user, $service, $addonPackage) {
        $returnResult = array();

        $query = $this->createQueryBuilder('sp')
                ->select('sp.packageId')
                ->leftJoin('sp.service', 's')
                ->where('sp.sessionId = :sessionId')
                ->setParameter('sessionId', $sessionId)
                ->andWhere('sp.paymentStatus = :paymentStatus')
                ->setParameter('paymentStatus', 'New')
                ->andWhere('sp.isAddon = :isAddon')
                ->setParameter('isAddon', 1)
                ->andWhere('sp.user = :user')
                ->setParameter('user', $user)
                ->andWhere('s.name = :name')
                ->setParameter('name', $service);

        $result = $query->getQuery()->getArrayResult();
        if ($result) {

            foreach ($result as $key => $val) {
                $returnResult[$val['packageId']] = $val['packageId'];
            }
        }

        return $returnResult;
    }

    public function getCartPurchaseItem($user, $sessionId, $paymentStatus = 'New') {

        $query = $this->createQueryBuilder('sp')
                ->select('sp')
                ->leftJoin('sp.service', 's')
                ->where('sp.sessionId = :sessionId')
                ->setParameter('sessionId', $sessionId)
                ->andWhere('sp.paymentStatus = :paymentStatus')
                ->setParameter('paymentStatus', $paymentStatus)
                ->andWhere('sp.user = :user')
                ->setParameter('user', $user);

        $result = $query->getQuery()->getResult();

        if ($result) {

            return $result;
        }
        return false;
    }

        public function getUserPurchaseHistoryArr($user, $ipAddressZones, $country = '',$isAradialMigrated = null) {

        $queryPurchaseHistory = $this->createQueryBuilder('sp')
                ->select("wl.domain","wl.companyName","u.username", "sp.id", "sp.packageName", "sp.payableAmount", "po.id as poId", "po.createdAt as poCreatedAt", "po.orderNumber", "po.compensationValidity", "sp.paymentStatus", "pm.name as PaymentMethodName", "pm.code as PaymentMethodCode", "pp.paypalTransactionId", "m.authTicket", "po.refundAmount", "s.name as service", "spl.name as serviceLocationId", "cc.chaseTransactionId")
                ->leftJoin('sp.purchaseOrder', 'po')
                ->leftjoin('sp.userService', 'us')
                ->leftJoin('sp.service', 's')
                ->leftJoin('sp.user', 'u')
                ->leftJoin('sp.service_location_id', 'spl')
                ->leftJoin('po.paypalCheckout', 'pp')
                ->leftJoin('po.paymentMethod', 'pm')
                ->leftJoin('po.milstar', 'm')
                ->leftJoin('po.chase', 'cc')
                ->leftJoin('DhiAdminBundle:WhiteLabel','wl', 'WITH','wl.id = sp.whiteLabel')
                ->where('sp.purchaseOrder > :purchaseOrder')
                ->setParameter('purchaseOrder', 0)
                ->andWhere('po.paymentStatus != :pstatus')
                ->setParameter('pstatus', 'InProcess')
                ->andWhere('sp.paymentStatus != :status')
                ->setParameter('status', 'New')
                ->orderby('po.id', 'DESC');

        if($isAradialMigrated){
            $queryPurchaseHistory->andWhere('u.isAradialMigrated = 1 ');
        }

        if ($user) {
            $queryPurchaseHistory->andWhere('sp.user = :userId')->setParameter('userId', $user);
        }
        if ($country != '') {
            $queryPurchaseHistory->andWhere('u.userServiceLocation IN (:country)');
            $queryPurchaseHistory->setParameter('country', $country);
        }
        return $queryPurchaseHistory;
    }

    public function getUserPurchaseHistory($user, $ipAddressZones, $country = '',$isAradialMigrated = null, $slot = array()) {

        $queryPurchaseHistory = $this->createQueryBuilder('sp')
                ->select('sp','wl')
                ->leftJoin('sp.purchaseOrder', 'po')
                ->leftjoin('sp.userService', 'us')
                ->leftJoin('sp.service', 's')
                ->leftJoin('sp.user', 'u')
                ->leftJoin('sp.service_location_id', 'spl')
                ->leftJoin('po.paypalCheckout', 'pp')
                ->leftJoin('po.paymentMethod', 'pm')
                ->leftJoin('po.milstar', 'm')
                ->leftJoin('DhiAdminBundle:WhiteLabel','wl', 'WITH','wl.id = sp.whiteLabel')
                ->where('sp.purchaseOrder > :purchaseOrder')
                ->setParameter('purchaseOrder', 0)
                ->andWhere('po.paymentStatus != :pstatus')
                ->setParameter('pstatus', 'InProcess')
                ->andWhere('sp.paymentStatus != :status')
                ->setParameter('status', 'New')
                ->orderby('po.id', 'DESC');

        if($isAradialMigrated){
            $queryPurchaseHistory->andWhere('u.isAradialMigrated = 1 ');
        }


//        if (!empty($ipAddressZones)) {
//
//            foreach ($ipAddressZones as $key => $value) {
//
//                $queryPurchaseHistory->orWhere('u.ipAddressLong >= :fromIp')
//                        ->setParameter('fromIp', $value['fromIP']);
//
//                $queryPurchaseHistory->andWhere('u.ipAddressLong <= :toIp')
//                        ->setParameter('toIp', $value['toIP']);
//            }
//        }

        if ($user) {

            $queryPurchaseHistory->andWhere('sp.user = :userId')
                    ->setParameter('userId', $user);
        }
        if ($country != '') {
            $queryPurchaseHistory->andWhere('u.userServiceLocation IN (:country)');
            $queryPurchaseHistory->setParameter('country', $country);
        }

        if (!empty($slot)) {
            $queryPurchaseHistory->setMaxResults($slot['limit']);
            $queryPurchaseHistory->setFirstResult($slot['offset']);
        }

        return $queryPurchaseHistory;
    }

    public function getSearchCsvPurchaseHistory($user, $ipAddressZones, $country = '',$searchData, $type = 'object', $slot = array()) {

        if ($type == 'object') {
            $queryPurchaseHistory = $this->getUserPurchaseHistory($user, $ipAddressZones, $country);
        }elseif ($type == 'array') {
            $queryPurchaseHistory = $this->getUserPurchaseHistoryArr($user, $ipAddressZones, $country);
        }

        if(isset($searchData['userName']) && $searchData['userName'] != '')
        {
            $queryPurchaseHistory->andWhere('u.username LIKE :username OR u.email LIKE :username')
                    ->setParameter('username', '%' . $searchData['userName'] . '%');
        }

        if (isset($searchData['orderNumber']) && $searchData['orderNumber'] != '') {
            $queryPurchaseHistory->andWhere('po.orderNumber LIKE :orderNumber')
                    ->setParameter('orderNumber', '%' . $searchData['orderNumber'] . '%');
        }

        if(isset($searchData['paymentMethod']) && $searchData['paymentMethod'] != '')
        {
            $queryPurchaseHistory->andWhere('pm.name = :paymentmethod')
                ->setParameter('paymentmethod', $searchData['paymentMethod']);
        }

        if(isset($searchData['transactionId']) && $searchData['transactionId'] != '')
        {
            $queryPurchaseHistory->andWhere('pp.paypalTransactionId LIKE :transactionId OR m.authTicket LIKE :transactionId OR cc.chaseTransactionId LIKE :transactionId');
            $queryPurchaseHistory->setParameter('transactionId', '%'.$searchData['transactionId'].'%');
        }

        if(isset($searchData['paymentStatus']) && $searchData['paymentStatus'] != '')
        {

            $queryPurchaseHistory->andWhere('sp.paymentStatus = :paymentStatus')
                    ->setParameter('paymentStatus',$searchData['paymentStatus']);
        }

        if (isset($searchData['isAradialMigrated']) && $searchData['isAradialMigrated'] != '') {

		  $queryPurchaseHistory->andWhere('u.isAradialMigrated = :isAradialMigrated')
                ->setParameter('isAradialMigrated', $searchData['isAradialMigrated']);
        }

        if (!empty($searchData) && isset($searchData['purchaseDate'])) {

            $RequestDate = explode('~', $searchData['purchaseDate']);
            $ReqFrom = trim($RequestDate[0]);
            $ReqTo = trim($RequestDate[1]);

            if ($ReqFrom != "") {
                $startDate = new \DateTime($ReqFrom);
                $queryPurchaseHistory->andWhere('po.createdAt >= :today_startdatetime');
                $queryPurchaseHistory->setParameter('today_startdatetime', $startDate->format('Y-m-d 00:00:00'));
            }
            if ($ReqTo != "") {
                $endDate = new \DateTime($ReqTo);
                $queryPurchaseHistory->andWhere('po.createdAt <= :today_enddatetime');
                $queryPurchaseHistory->setParameter('today_enddatetime', $endDate->format('Y-m-d 23:59:59'));
            }
        }
        
        if(isset($searchData['whitelabel']) && $searchData['whitelabel'] != '') {
            $queryPurchaseHistory->andWhere('sp.whiteLabel = :whitelabelsite')
			         ->setParameter('whitelabelsite', $searchData['whitelabel']);
        }

        if (!empty($slot)) {
            $queryPurchaseHistory->setMaxResults($slot['limit']);
            $queryPurchaseHistory->setFirstResult($slot['offset']);
        }
        return $queryPurchaseHistory;
    }

    //Added for Gridlist
    public function getPurchaseHistoryGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper) {

        $data = $this->trim_serach_data($searchData, $SearchType);

        $query = $this->createQueryBuilder('sp')
                ->leftJoin('sp.purchaseOrder', 'po')
                ->leftjoin('sp.userService', 'us')
                ->leftJoin('sp.service', 's')
                ->leftJoin('sp.user', 'u')
                ->leftJoin('po.paypalCheckout', 'pp')
                ->leftJoin('po.paymentMethod', 'pm')
                ->where('sp.purchaseOrder > :purchaseOrder')
                ->setParameter('purchaseOrder', 0)
                ->andWhere('po.paymentStatus != :status')
                ->setParameter('status', 'New')
                ->orderby('sp.id', 'DESC');

        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {

            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);

        $countData = count($query->getQuery()->getArrayResult());

        $query->setMaxResults($limit);
        $query->setFirstResult($offset);

        $result = $query->getQuery()->getResult();

        $dataResult = array();

        if ($countData > 0) {

            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;

            return $dataResult;
        }
        return false;
    }

    public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {

                    if ($key == 'Username' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'u.username';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    $i++;
                }
            } else {

            }
        }
        return $QueryStr;
    }

    public function getRecurringPaymentAmount($purchaseOrderId) {
    	$query = $this->createQueryBuilder('sp')
    					->select('SUM(sp.payableAmount)')
				    	->leftJoin('sp.purchaseOrder', 'po')
				    	->where('sp.purchaseOrder =:purchaseOrder')
				    	->setParameter('purchaseOrder', $purchaseOrderId)
				    	->andWhere('sp.paymentStatus = :status')
				    	->setParameter('status', 'Completed');

    	$result = $query->getQuery()->getSingleScalarResult();
    	return $result;
    }

    public function getPurchaseCount($locationId, $dates){
        $query = $this->createQueryBuilder('sp')
            ->select('p.packageId', 'p.packageName', '0 as totalCustomerValue', '0 as totalPartnerValue', 'count(sp.id) as totalRedeemed')
            ->innerJoin('DhiAdminBundle:Package','p','with','sp.packageId = p.packageId')
            ->innerJoin('sp.service', 's')
            ->innerJoin('p.serviceLocation', 'sl')
            ->where('sl.id = :locationId')
            ->setParameter('locationId', $locationId)
            ->andWhere('p.packageType = :packageType')
            ->setParameter('packageType', 'IPTV')
            ->andWhere('sp.promoCodeApplied != :promoCodeApplied')
            ->setParameter('promoCodeApplied', 2)
            ->andWhere('sp.DiscountCodeApplied != :DiscountCodeApplied')
            ->setParameter('DiscountCodeApplied', 2)
            ->groupBy("p.packageId");

        if (!empty($dates)){
            $RequestDate = explode('~', $dates);
            $ReqFrom = trim($RequestDate[0]);
            $ReqTo = trim($RequestDate[1]);
            if ($ReqFrom != "") {
                $startDate = new \DateTime($ReqFrom);
                $query->andWhere('sp.createdAt >= :fromCreatedAt')->setParameter('fromCreatedAt', $startDate->format('Y-m-d 00:00:00'));
            }
            if ($ReqTo != "") {
                $endDate = new \DateTime($ReqTo);
                $query->andWhere('sp.createdAt <= :toCreatedAt')->setParameter('toCreatedAt', $endDate->format('Y-m-d 23:59:59'));
            }
        }
        $returnResult = $query->getQuery()->getResult();

        return $returnResult;
    }
    
    public function getAdminUserCartItems($user, $sessionId) {

        $query = $this->createQueryBuilder('sp')
                ->select('sp')
                ->where('sp.user = :userid')
                ->setParameter('userid', $user)
                ->andWhere('sp.paymentStatus = :paymentStatus')
                ->setParameter('paymentStatus', 'NEW')
                ->andWhere('sp.sessionId = :sessionId')
                ->setParameter('sessionId', $sessionId)
                ->andWhere('sp.isAddon = :isAddon')
                ->setParameter('isAddon', 0)
                ->andWhere('sp.payableAmount != :payableAmount')
                ->setParameter('payableAmount', 0.00);
        

        $result = $query->getQuery()->getResult();
        if(count($result) > 0){
            return $result;
        }
        return false;
    }

    public function getPoUserServce($poId){
        $query = $this->createQueryBuilder('sp')
            ->select('sp.id as servicePurchaseId', 'us.activationDate', 'us.expiryDate', 'sp.packageName', 'sp.actualAmount', 'sp.payableAmount', 'sp.paymentStatus', 'sp.id as id', 'sp.rechargeStatus', 's.name as service', "sp.isCompensation", 'sp.isAddon', 'sp.isCredit', 'c.credit', 'spl.name as serviceLocationId')
            ->leftJoin("sp.userService", "us")
            ->innerJoin("sp.service", "s")
            ->innerJoin("sp.purchaseOrder", "po")
            ->leftJoin("sp.service_location_id", "spl")
            ->leftjoin("sp.credit", 'c')
            ->where('po.id = :purchaseOrder')
            ->setParameter('purchaseOrder', $poId);
        $result = $query->getQuery()->getArrayResult();
        
        if(count($result) > 0){
            return $result;
        }
        return false;
    }    
}
